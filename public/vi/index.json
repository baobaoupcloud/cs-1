[
{
	"uri": "//localhost:1313/vi/",
	"title": "CS50 Tuần 1 - Lập Trình C",
	"tags": [],
	"description": "",
	"content": "Giới Thiệu về Lập Trình C Chào mừng bạn đến với Tuần 1 của khóa học CS50! Module này sẽ giới thiệu các kiến thức nền tảng về lập trình sử dụng ngôn ngữ C.\nMục Tiêu Học Tập Kết thúc module này, bạn sẽ có khả năng:\nViết được các chương trình cơ bản bằng ngôn ngữ C Hiểu được các khái niệm cốt lõi trong lập trình Làm việc với biến và kiểu dữ liệu Triển khai logic điều kiện Tạo vòng lặp cho các tác vụ lặp đi lặp lại Sử dụng các toán tử và hàm Nội Dung Workshop Giới thiệu về CS50 Lập trình bằng ngôn ngữ C Cú pháp C Output và Input trong C Comments trong C Biến trong C Các kiểu dữ liệu trong C Hằng số trong lập trình C Toán tử trong C Kiểu dữ liệu Boolean Câu lệnh điều kiện trong C Switch Statement trong C Vòng lặp For trong C [Vòng lặp For trong C]](14-c-for-loop) Câu lệnh Break và Continue trong C Tóm tắt Phân Bổ Thời Gian Tổng thời gian Workshop: ~2 giờ Lý thuyết: 45 phút Bài tập thực hành: 75 phút Yêu Cầu Tiên Quyết Trước khi bắt đầu workshop này, bạn cần có:\nMáy tính đã cài đặt C compiler Hiểu biết cơ bản về thao tác máy tính Text editor hoặc IDE tùy chọn "
},
{
	"uri": "//localhost:1313/vi/1-introduction/",
	"title": "Giới thiệu về CS50",
	"tags": [],
	"description": "",
	"content": "Tổng quan CS50 là khóa học nhập môn hàng đầu về Computer Science của Đại học Harvard, được giảng dạy bởi Giáo sư David J. Malan. Đây là khóa học nền tảng, cung cấp cái nhìn toàn diện về thế giới máy tính, bao gồm các khái niệm thiết yếu và kỹ năng lập trình thực tế.\nCấu trúc khóa học Chương trình học bao gồm nhiều lĩnh vực then chốt tạo nên nền tảng của giáo dục computer science:\nCác nguyên lý Computer Science Khóa học bắt đầu với những khái niệm lý thuyết cốt lõi làm nền tảng cho tất cả lĩnh vực computing:\nAbstraction - Học cách quản lý độ phức tạp bằng cách ẩn các chi tiết implementation Algorithms - Nghiên cứu các phương pháp giải quyết vấn đề một cách có hệ thống và hiệu quả Data Structures - Hiểu cách tổ chức và quản lý dữ liệu hiệu quả Encapsulation - Nắm vững nguyên lý đóng gói dữ liệu với các phương thức xử lý dữ liệu đó Resource Management - Học cách sử dụng hiệu quả tài nguyên máy tính như memory và processing power Security \u0026amp; Engineering Practices Phát triển phần mềm hiện đại đòi hỏi nền tảng vững chắc về:\nSoftware Engineering Principles - Các best practice để viết code dễ bảo trì và có khả năng mở rộng Security Concepts - Hiểu về các lỗ hổng phổ biến và cách phòng chống Web Development Fundamentals - Học cách xây dựng web application an toàn và hiệu quả Ngôn ngữ lập trình Trong suốt khóa học, bạn sẽ được thực hành với nhiều ngôn ngữ lập trình:\nC - Hiểu về lập trình low-level và quản lý memory Python - Học lập trình high-level và phát triển nhanh SQL - Làm chủ việc quản lý và truy vấn database JavaScript - Tạo trải nghiệm web tương tác HTML \u0026amp; CSS - Xây dựng nội dung web có cấu trúc và style Bắt đầu Tuần 1 đánh dấu khởi đầu hành trình với lập trình C, xây dựng nền tảng vững chắc về các khái niệm lập trình và tư duy điện toán. Module này giới thiệu:\nCác khái niệm cốt lõi Basic Syntax và cấu trúc chương trình\nHiểu cách viết và tổ chức chương trình C Học các quy tắc và quy ước của ngôn ngữ C Variables và Data Types\nLàm việc với integers, floats và characters Hiểu về type conversion và các giới hạn Control Flow và Conditional Statements\nLàm chủ câu lệnh if-else Thực hiện loops và switches Hiểu về luồng thực thi chương trình Functions và Memory Management\nTạo và sử dụng functions Hiểu về stack vs heap memory Quản lý memory allocation và deallocation Info: Workshop này được chuyển thể từ chương trình CS50 của Harvard và được tối ưu hóa cho môi trường học tập AWS. Tất cả nội dung được thiết kế phù hợp với tiêu chuẩn học thuật của CS50 đồng thời cung cấp các ứng dụng thực tế trong bối cảnh cloud computing.\nCác bước tiếp theo Sau khi hoàn thành phần giới thiệu này, bạn sẽ sẵn sàng để:\nThiết lập môi trường phát triển Viết chương trình C đầu tiên Bắt đầu khám phá các khái niệm lập trình cơ bản Bắt đầu tư duy điện toán về giải quyết vấn đề "
},
{
	"uri": "//localhost:1313/vi/2-how-to-program-in-c/",
	"title": "Lập trình bằng ngôn ngữ C",
	"tags": [],
	"description": "",
	"content": "Cấu hình VS Code cho Microsoft C++ Trong hướng dẫn này, bạn sẽ cấu hình Visual Studio Code để sử dụng trình biên dịch và gỡ lỗi Microsoft Visual C++ trên Windows.\nSau khi cấu hình VS Code, bạn sẽ biên dịch và gỡ lỗi một chương trình Hello World đơn giản trong VS Code. Hướng dẫn này không dạy chi tiết về bộ công cụ Microsoft C++ hay ngôn ngữ C++. Với những chủ đề đó, có rất nhiều tài liệu tốt trên mạng.\nNếu bạn gặp bất kỳ vấn đề nào, hãy thoải mái tạo issue cho hướng dẫn này trong kho lưu trữ tài liệu VS Code.\nYêu cầu trước khi bắt đầu Để hoàn thành thành công hướng dẫn này, bạn cần:\nCài đặt Visual Studio Code\nCài đặt tiện ích mở rộng C/C++ cho VS Code. Bạn có thể cài đặt tiện ích C/C++ bằng cách tìm kiếm \u0026lsquo;c++\u0026rsquo; trong mục Extensions (kb(workbench.view.extensions)).\nCài đặt bộ công cụ trình biên dịch Microsoft Visual C++ (MSVC).\nNếu bạn có phiên bản Visual Studio mới, hãy mở Visual Studio Installer từ menu Start của Windows và kiểm tra xem workload C++ đã được chọn chưa. Nếu chưa cài đặt, hãy đánh dấu vào ô và chọn nút Modify trong trình cài đặt.\nBạn cũng có thể cài đặt workload Desktop development with C++ mà không cần cài đặt đầy đủ IDE Visual Studio. Từ trang Downloads của Visual Studio, cuộn xuống cho đến khi thấy Tools for Visual Studio trong phần All Downloads và chọn tải về Build Tools for Visual Studio 2022.\nĐiều này sẽ khởi chạy Visual Studio Installer, hiển thị hộp thoại các workload có sẵn của Visual Studio Build Tools. Đánh dấu workload Desktop development with C++ và chọn Install.\nLưu ý: Bạn có thể sử dụng bộ công cụ C++ từ Visual Studio Build Tools cùng với Visual Studio Code để biên dịch, build và xác minh bất kỳ codebase C++ nào miễn là bạn có giấy phép Visual Studio hợp lệ (Community, Pro hoặc Enterprise) mà bạn đang sử dụng để phát triển codebase C++ đó.\nKiểm tra cài đặt Microsoft Visual C++ Để sử dụng MSVC từ dòng lệnh hoặc VS Code, bạn phải chạy từ Developer Command Prompt for Visual Studio. Một shell thông thường như PowerShell, Bash hoặc Windows command prompt không có các biến môi trường path cần thiết.\nĐể mở Developer Command Prompt for VS, bắt đầu gõ \u0026lsquo;developer\u0026rsquo; trong menu Start của Windows, và bạn sẽ thấy nó xuất hiện trong danh sách gợi ý. Tên chính xác phụ thuộc vào phiên bản Visual Studio hoặc Visual Studio Build Tools bạn đã cài đặt. Chọn mục này để mở command prompt.\nBạn có thể kiểm tra xem trình biên dịch C++, cl.exe, đã được cài đặt đúng chưa bằng cách gõ \u0026lsquo;cl\u0026rsquo; và bạn sẽ thấy thông báo bản quyền với phiên bản và mô tả sử dụng cơ bản.\nNếu Developer Command Prompt đang sử dụng thư mục BuildTools làm thư mục khởi đầu (bạn không nên đặt dự án ở đó), hãy điều hướng đến thư mục người dùng của bạn (C:\\users\\{tên người dùng}\\) trước khi bắt đầu tạo dự án mới.\nLưu ý: Nếu vì lý do nào đó bạn không thể chạy VS Code từ Developer Command Prompt, bạn có thể tìm giải pháp thay thế để build các dự án C++ với VS Code trong phần Chạy VS Code bên ngoài Developer Command Prompt.\nTạo Hello World Từ Developer Command Prompt, tạo một thư mục trống có tên \u0026ldquo;projects\u0026rdquo; nơi bạn có thể lưu trữ tất cả các dự án VS Code, sau đó tạo một thư mục con có tên \u0026ldquo;helloworld\u0026rdquo;, điều hướng vào nó và mở VS Code (code) trong thư mục đó (.) bằng cách nhập các lệnh sau:\nmkdir projects cd projects mkdir helloworld cd helloworld code . Lệnh \u0026ldquo;code .\u0026rdquo; mở VS Code trong thư mục làm việc hiện tại, thư mục này trở thành \u0026ldquo;workspace\u0026rdquo; của bạn. Khi bạn làm theo hướng dẫn, bạn sẽ thấy ba tệp được tạo trong thư mục .vscode trong workspace:\ntasks.json (hướng dẫn build) launch.json (cài đặt trình gỡ lỗi) c_cpp_properties.json (đường dẫn trình biên dịch và cài đặt IntelliSense) Thêm tệp mã nguồn Trong thanh tiêu đề File Explorer, chọn nút New File và đặt tên tệp là helloworld.cpp.\nThêm mã nguồn hello world Bây giờ dán mã nguồn này vào:\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int main() { vector\u0026lt;string\u0026gt; msg {\u0026#34;Hello\u0026#34;, \u0026#34;C++\u0026#34;, \u0026#34;World\u0026#34;, \u0026#34;from\u0026#34;, \u0026#34;VS Code\u0026#34;, \u0026#34;and the C++ extension!\u0026#34;}; for (const string\u0026amp; word : msg) { cout \u0026lt;\u0026lt; word \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } cout \u0026lt;\u0026lt; endl; } Nhấn kb(workbench.action.files.save) để lưu tệp. Chú ý cách tệp bạn vừa thêm xuất hiện trong chế độ xem File Explorer (kb(workbench.view.explorer)) ở thanh bên của VS Code:\nBạn cũng có thể bật Auto Save để tự động lưu các thay đổi tệp của bạn, bằng cách chọn Auto Save trong menu chính File.\nActivity Bar ở bên trái xa cho phép bạn mở các chế độ xem khác nhau như Search, Source Control và Run. Bạn sẽ xem chế độ xem Run sau trong hướng dẫn này. Bạn có thể tìm hiểu thêm về các chế độ xem khác trong tài liệu Giao diện người dùng VS Code.\nLưu ý: Khi bạn lưu hoặc mở tệp C++, bạn có thể thấy thông báo từ tiện ích mở rộng C/C++ về việc có sẵn phiên bản Insiders, cho phép bạn thử các tính năng và bản sửa lỗi mới. Bạn có thể bỏ qua thông báo này bằng cách chọn X (Clear Notification).\nKhám phá IntelliSense Trong tệp helloworld.cpp mới của bạn, di chuột qua vector hoặc string để xem thông tin kiểu. Sau khi khai báo biến msg, bắt đầu gõ msg. như khi bạn gọi một hàm thành viên. Bạn sẽ ngay lập tức thấy danh sách hoàn thành hiển thị tất cả các hàm thành viên và một cửa sổ hiển thị thông tin kiểu cho đối tượng msg:\nBạn có thể nhấn phím kbstyle(Tab) để chèn thành viên được chọn; sau đó, khi bạn thêm dấu ngoặc đơn mở, bạn sẽ thấy thông tin về bất kỳ đối số nào mà hàm yêu cầu.\nTôi sẽ tiếp tục dịch phần tiếp theo:\nChạy helloworld.cpp Hãy nhớ rằng, tiện ích mở rộng C++ sử dụng trình biên dịch C++ đã được cài đặt trên máy của bạn để build chương trình. Đảm bảo bạn đã cài đặt trình biên dịch C++ trước khi thử chạy và gỡ lỗi helloworld.cpp trong VS Code.\nMở helloworld.cpp để nó là tệp đang hoạt động. Nhấn nút play ở góc trên bên phải của trình soạn thảo. Chọn C/C++: cl.exe build and debug active file từ danh sách trình biên dịch được phát hiện trên hệ thống của bạn. Bạn sẽ chỉ được yêu cầu chọn trình biên dịch lần đầu tiên chạy helloworld.cpp. Trình biên dịch này sẽ được đặt làm trình biên dịch \u0026ldquo;mặc định\u0026rdquo; trong tệp tasks.json.\nSau khi build thành công, đầu ra của chương trình sẽ xuất hiện trong Terminal tích hợp. Nếu bạn gặp lỗi khi cố gắng build và gỡ lỗi với cl.exe, hãy đảm bảo bạn đã khởi động VS Code từ Developer Command Prompt for Visual Studio sử dụng lệnh tắt code ..\nLần đầu tiên bạn chạy chương trình, tiện ích mở rộng C++ tạo tasks.json, bạn sẽ tìm thấy nó trong thư mục .vscode của dự án. tasks.json lưu trữ cấu hình build.\nTệp tasks.json mới của bạn phải trông tương tự như JSON dưới đây:\n{ \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;tasks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;C/C++: cl.exe build active file\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;cl.exe\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;/Zi\u0026#34;, \u0026#34;/EHsc\u0026#34;, \u0026#34;/Fe:\u0026#34;, \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, \u0026#34;${file}\u0026#34; ], \u0026#34;problemMatcher\u0026#34;: [ \u0026#34;$msCompile\u0026#34; ], \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true }, \u0026#34;detail\u0026#34;: \u0026#34;Task generated by Debugger.\u0026#34; } ] } Lưu ý: Bạn có thể tìm hiểu thêm về các biến tasks.json trong tài liệu tham khảo biến.\nCài đặt command chỉ định chương trình để chạy; trong trường hợp này là \u0026ldquo;cl.exe\u0026rdquo;. Mảng args chỉ định các đối số dòng lệnh sẽ được truyền cho cl.exe. Các đối số này phải được chỉ định theo thứ tự mà trình biên dịch mong đợi.\nTask này yêu cầu trình biên dịch C++ lấy tệp đang hoạt động (${file}), biên dịch nó và tạo một tệp thực thi (/Fe: switch) trong thư mục hiện tại (${fileDirname}) với cùng tên như tệp đang hoạt động nhưng với phần mở rộng .exe (${fileBasenameNoExtension}.exe), kết quả là helloworld.exe cho ví dụ của chúng ta.\nChạy helloworld.cpp Hãy nhớ rằng, tiện ích mở rộng C++ sử dụng trình biên dịch C++ đã được cài đặt trên máy của bạn để build chương trình. Đảm bảo bạn đã cài đặt trình biên dịch C++ trước khi thử chạy và gỡ lỗi helloworld.cpp trong VS Code.\nMở helloworld.cpp để nó là tệp đang hoạt động. Nhấn nút play ở góc trên bên phải của trình soạn thảo. Chọn C/C++: cl.exe build and debug active file từ danh sách trình biên dịch được phát hiện trên hệ thống của bạn. Bạn sẽ chỉ được yêu cầu chọn trình biên dịch lần đầu tiên chạy helloworld.cpp. Trình biên dịch này sẽ được đặt làm trình biên dịch \u0026ldquo;mặc định\u0026rdquo; trong tệp tasks.json.\nSau khi build thành công, đầu ra của chương trình sẽ xuất hiện trong Terminal tích hợp. Nếu bạn gặp lỗi khi cố gắng build và gỡ lỗi với cl.exe, hãy đảm bảo bạn đã khởi động VS Code từ Developer Command Prompt for Visual Studio sử dụng lệnh tắt code ..\nLần đầu tiên bạn chạy chương trình, tiện ích mở rộng C++ tạo tasks.json, bạn sẽ tìm thấy nó trong thư mục .vscode của dự án. tasks.json lưu trữ cấu hình build.\nTệp tasks.json mới của bạn phải trông tương tự như JSON dưới đây:\n{ \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;tasks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;C/C++: cl.exe build active file\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;cl.exe\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;/Zi\u0026#34;, \u0026#34;/EHsc\u0026#34;, \u0026#34;/Fe:\u0026#34;, \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, \u0026#34;${file}\u0026#34; ], \u0026#34;problemMatcher\u0026#34;: [ \u0026#34;$msCompile\u0026#34; ], \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true }, \u0026#34;detail\u0026#34;: \u0026#34;Task generated by Debugger.\u0026#34; } ] } Lưu ý: Bạn có thể tìm hiểu thêm về các biến tasks.json trong tài liệu tham khảo biến.\nCài đặt command chỉ định chương trình để chạy; trong trường hợp này là \u0026ldquo;cl.exe\u0026rdquo;. Mảng args chỉ định các đối số dòng lệnh sẽ được truyền cho cl.exe. Các đối số này phải được chỉ định theo thứ tự mà trình biên dịch mong đợi.\nTask này yêu cầu trình biên dịch C++ lấy tệp đang hoạt động (${file}), biên dịch nó và tạo một tệp thực thi (/Fe: switch) trong thư mục hiện tại (${fileDirname}) với cùng tên như tệp đang hoạt động nhưng với phần mở rộng .exe (${fileBasenameNoExtension}.exe), kết quả là helloworld.exe cho ví dụ của chúng ta.\nGiá trị label là những gì bạn sẽ thấy trong danh sách task; bạn có thể đặt tên này theo ý muốn.\nGiá trị detail là những gì bạn sẽ thấy như mô tả của task trong danh sách task. Rất nên đổi tên giá trị này để phân biệt nó với các task tương tự.\nGiá trị problemMatcher chọn trình phân tích cú pháp đầu ra để tìm lỗi và cảnh báo trong đầu ra của trình biên dịch. Đối với cl.exe, bạn sẽ nhận được kết quả tốt nhất nếu sử dụng problem matcher $msCompile.\nTừ giờ trở đi, nút play sẽ đọc từ tasks.json để biết cách build và chạy chương trình của bạn. Bạn có thể định nghĩa nhiều task build trong tasks.json, và task nào được đánh dấu là mặc định sẽ được nút play sử dụng. Trong trường hợp bạn cần thay đổi trình biên dịch mặc định, bạn có thể chạy Tasks: Configure default build task. Hoặc bạn có thể sửa đổi tệp tasks.json và xóa mặc định bằng cách thay thế đoạn này:\n\u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true }, bằng:\n\u0026#34;group\u0026#34;: \u0026#34;build\u0026#34;, Sửa đổi tasks.json Bạn có thể sửa đổi tasks.json để build nhiều tệp C++ bằng cách sử dụng đối số như \u0026quot;${workspaceFolder}/*.cpp\u0026quot; thay vì \u0026quot;${file}\u0026quot;. Điều này sẽ build tất cả các tệp .cpp trong thư mục hiện tại của bạn. Bạn cũng có thể sửa đổi tên tệp đầu ra bằng cách thay thế \u0026quot;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026quot; bằng tên tệp cố định (ví dụ: \u0026quot;${workspaceFolder}\\\\myProgram.exe\u0026quot;).\nGỡ lỗi helloworld.cpp Để gỡ lỗi code của bạn:\nQuay lại helloworld.cpp để nó là tệp đang hoạt động. Đặt điểm dừng bằng cách nhấp vào lề trình soạn thảo hoặc sử dụng F9 trên dòng hiện tại. Từ drop-down bên cạnh nút play, chọn Debug C/C++ File. Chọn C/C++: cl.exe build and debug active file từ danh sách trình biên dịch được phát hiện trên hệ thống của bạn (bạn sẽ chỉ được yêu cầu chọn trình biên dịch lần đầu tiên chạy hoặc gỡ lỗi helloworld.cpp). Nút play có hai chế độ: Run C/C++ File và Debug C/C++ File. Nó sẽ mặc định về chế độ được sử dụng lần cuối. Nếu bạn thấy biểu tượng gỡ lỗi trong nút play, bạn có thể chọn nút play để gỡ lỗi thay vì chọn mục trong menu drop-down.\nNếu bạn gặp lỗi khi cố gắng build và gỡ lỗi với cl.exe, hãy đảm bảo bạn đã khởi động VS Code từ Developer Command Prompt for Visual Studio sử dụng lệnh tắt code ..\nKhám phá trình gỡ lỗi Trước khi bắt đầu thực hiện từng bước trong code, hãy dành một chút thời gian để nhận thấy một số thay đổi trong giao diện người dùng:\nTerminal tích hợp xuất hiện ở dưới cùng của trình soạn thảo mã nguồn. Trong tab Debug Output, bạn thấy đầu ra cho biết trình gỡ lỗi đang hoạt động. Trình soạn thảo làm nổi bật dòng nơi bạn đặt điểm dừng trước khi bắt đầu trình gỡ lỗi: Chế độ xem Run and Debug ở bên trái hiển thị thông tin gỡ lỗi. Bạn sẽ thấy một ví dụ sau trong hướng dẫn.\nỞ đầu trình soạn thảo code, bảng điều khiển gỡ lỗi xuất hiện. Bạn có thể di chuyển nó xung quanh màn hình bằng cách kéo các chấm ở bên trái.\nThực hiện từng bước trong code Bây giờ bạn đã sẵn sàng để bắt đầu thực hiện từng bước trong code.\nNhấp hoặc nhấn biểu tượng Step over trong bảng điều khiển gỡ lỗi. Điều này sẽ chuyển thực thi chương trình đến dòng đầu tiên của vòng lặp for, và bỏ qua tất cả các lệnh gọi hàm nội bộ trong các lớp vector và string được gọi khi biến msg được tạo và khởi tạo. Chú ý sự thay đổi trong cửa sổ Variables ở bên trái.\nTrong trường hợp này, các lỗi là dự kiến vì, mặc dù tên biến cho vòng lặp hiện đã hiển thị với trình gỡ lỗi, câu lệnh vẫn chưa thực thi, vì vậy không có gì để đọc tại thời điểm này. Tuy nhiên, nội dung của msg hiển thị vì câu lệnh đó đã hoàn thành.\nNhấn Step over một lần nữa để chuyển đến câu lệnh tiếp theo trong chương trình này (bỏ qua tất cả code bên trong được thực thi để khởi tạo vòng lặp). Bây giờ, cửa sổ Variables hiển thị thông tin về các biến vòng lặp.\nNhấn Step over một lần nữa để thực thi câu lệnh cout. (Lưu ý rằng tiện ích mở rộng C++ không in bất kỳ đầu ra nào vào Debug Console cho đến khi vòng lặp kết thúc.)\nNếu muốn, bạn có thể tiếp tục nhấn Step over cho đến khi tất cả các từ trong vector được in ra console. Nhưng nếu bạn tò mò, hãy thử nhấn nút Step Into để thực hiện từng bước qua mã nguồn trong thư viện chuẩn C++!\nĐể quay lại code của bạn, một cách là tiếp tục nhấn Step over. Một cách khác là đặt điểm dừng trong code của bạn bằng cách chuyển sang tab helloworld.cpp trong trình soạn thảo code, đặt con trỏ chèn vào câu lệnh cout bên trong vòng lặp và nhấn kb(editor.debug.action.toggleBreakpoint). Một chấm đỏ xuất hiện trong máng bên trái để chỉ ra rằng một điểm dừng đã được đặt trên dòng này.\nSau đó nhấn kb(workbench.action.debug.start) để bắt đầu thực thi từ dòng hiện tại trong header thư viện chuẩn. Thực thi sẽ dừng tại cout. Nếu muốn, bạn có thể nhấn kb(editor.debug.action.toggleBreakpoint) một lần nữa để tắt điểm dừng.\nThiết lập theo dõi Đôi khi bạn có thể muốn theo dõi giá trị của một biến khi chương trình của bạn thực thi. Bạn có thể làm điều này bằng cách thiết lập một watch trên biến.\nĐặt con trỏ chèn bên trong vòng lặp. Trong cửa sổ Watch, chọn dấu cộng và trong hộp văn bản, gõ word, là tên của biến vòng lặp. Bây giờ xem cửa sổ Watch khi bạn thực hiện từng bước qua vòng lặp. Thêm một watch khác bằng cách thêm câu lệnh này trước vòng lặp: int i = 0;. Sau đó, bên trong vòng lặp, thêm câu lệnh: ++i;. Bây giờ thêm một watch cho i như bạn đã làm trong bước trước.\nĐể nhanh chóng xem giá trị của bất kỳ biến nào trong khi thực thi đang tạm dừng tại điểm dừng, bạn có thể di chuột qua nó.\nTùy chỉnh gỡ lỗi với launch.json Khi bạn gỡ lỗi với nút play hoặc kb(workbench.action.debug.start), tiện ích mở rộng C++ tạo một cấu hình gỡ lỗi động ngay lập tức.\nCó những trường hợp bạn muốn tùy chỉnh cấu hình gỡ lỗi của mình, chẳng hạn như chỉ định các đối số để truyền cho chương trình trong thời gian chạy. Bạn có thể định nghĩa các cấu hình gỡ lỗi tùy chỉnh trong tệp launch.json.\nĐể tạo launch.json, chọn Add Debug Configuration từ menu drop-down của nút play.\nSau đó bạn sẽ thấy một dropdown cho các cấu hình gỡ lỗi được xác định trước khác nhau. Chọn C/C++: cl.exe build and debug active file.\nVS Code tạo một tệp launch.json, trông giống như thế này:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;C/C++: cl.exe build and debug active file\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;cppvsdbg\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, \u0026#34;args\u0026#34;: [], \u0026#34;stopAtEntry\u0026#34;: false, \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026#34;environment\u0026#34;: [], \u0026#34;externalConsole\u0026#34;: false, \u0026#34;preLaunchTask\u0026#34;: \u0026#34;C/C++: cl.exe build active file\u0026#34; } ] } Trong JSON trên, program chỉ định chương trình bạn muốn gỡ lỗi. Ở đây nó được đặt thành thư mục tệp đang hoạt động (${fileDirname}) và tên tệp đang hoạt động với phần mở rộng .exe (${fileBasenameNoExtension}.exe), nếu helloworld.cpp là tệp đang hoạt động thì sẽ là helloworld.exe. Thuộc tính args là một mảng các đối số để truyền cho chương trình trong thời gian chạy.\nTheo mặc định, tiện ích mở rộng C++ sẽ không thêm bất kỳ điểm dừng nào vào mã nguồn của bạn và giá trị stopAtEntry được đặt thành false.\nThay đổi giá trị stopAtEntry thành true để khiến trình gỡ lỗi dừng tại phương thức main khi bạn bắt đầu gỡ lỗi.\nTừ giờ trở đi, nút play và kb(workbench.action.debug.start) sẽ đọc từ tệp launch.json của bạn khi khởi chạy chương trình để gỡ lỗi.\nCấu hình C/C++ Nếu bạn muốn kiểm soát nhiều hơn đối với tiện ích mở rộng C++, bạn có thể tạo một tệp c_cpp_properties.json, cho phép bạn thay đổi các cài đặt như đường dẫn đến trình biên dịch, đường dẫn include, tiêu chuẩn C++ (mặc định là C++17), và nhiều hơn nữa.\nBạn có thể xem giao diện cấu hình C/C++ bằng cách chạy lệnh C/C++: Edit Configurations (UI) từ Command Palette (kb(workbench.action.showCommands)).\nThao tác này mở trang C/C++ Configurations. Khi bạn thực hiện thay đổi ở đây, VS Code sẽ ghi chúng vào một tệp có tên c_cpp_properties.json trong thư mục .vscode.\nTrong JSON trên, program chỉ định chương trình bạn muốn gỡ lỗi. Ở đây nó được đặt thành thư mục tệp đang hoạt động (${fileDirname}) và tên tệp đang hoạt động với phần mở rộng .exe (${fileBasenameNoExtension}.exe), nếu helloworld.cpp là tệp đang hoạt động thì sẽ là helloworld.exe. Thuộc tính args là một mảng các đối số để truyền cho chương trình trong thời gian chạy.\nTheo mặc định, tiện ích mở rộng C++ sẽ không thêm bất kỳ điểm dừng nào vào mã nguồn của bạn và giá trị stopAtEntry được đặt thành false.\nThay đổi giá trị stopAtEntry thành true để khiến trình gỡ lỗi dừng tại phương thức main khi bạn bắt đầu gỡ lỗi.\nTừ giờ trở đi, nút play và kb(workbench.action.debug.start) sẽ đọc từ tệp launch.json của bạn khi khởi chạy chương trình để gỡ lỗi.\nCấu hình C/C++ Nếu bạn muốn kiểm soát nhiều hơn đối với tiện ích mở rộng C++, bạn có thể tạo một tệp c_cpp_properties.json, cho phép bạn thay đổi các cài đặt như đường dẫn đến trình biên dịch, đường dẫn include, tiêu chuẩn C++ (mặc định là C++17), và nhiều hơn nữa.\nBạn có thể xem giao diện cấu hình C/C++ bằng cách chạy lệnh C/C++: Edit Configurations (UI) từ Command Palette (kb(workbench.action.showCommands)).\nThao tác này mở trang C/C++ Configurations. Khi bạn thực hiện thay đổi ở đây, VS Code sẽ ghi chúng vào một tệp có tên c_cpp_properties.json trong thư mục .vscode.\nTái sử dụng cấu hình C++ của bạn VS Code giờ đã được cấu hình để sử dụng trình biên dịch Microsoft C++. Cấu hình này áp dụng cho workspace hiện tại. Để tái sử dụng cấu hình, chỉ cần sao chép các tệp JSON vào thư mục .vscode trong một thư mục dự án mới (workspace) và thay đổi tên của (các) tệp nguồn và tệp thực thi khi cần.\nChạy VS Code bên ngoài Developer Command Prompt Trong một số trường hợp nhất định, không thể chạy VS Code từ Developer Command Prompt for Visual Studio (ví dụ: trong các kịch bản Remote Development thông qua SSH). Trong trường hợp đó, bạn có thể tự động hóa việc khởi tạo Developer Command Prompt for Visual Studio trong quá trình build bằng cách sử dụng cấu hình tasks.json sau:\n{ \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;windows\u0026#34;: { \u0026#34;options\u0026#34;: { \u0026#34;shell\u0026#34;: { \u0026#34;executable\u0026#34;: \u0026#34;cmd.exe\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;/C\u0026#34;, // Đường dẫn đến VsDevCmd.bat phụ thuộc vào phiên bản Visual Studio bạn đã cài đặt. \u0026#34;\\\u0026#34;C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/Tools/VsDevCmd.bat\\\u0026#34;\u0026#34;, \u0026#34;\u0026amp;\u0026amp;\u0026#34; ] } } }, \u0026#34;tasks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;cl.exe build active file\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;cl.exe\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;/Zi\u0026#34;, \u0026#34;/EHsc\u0026#34;, \u0026#34;/Fe:\u0026#34;, \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, \u0026#34;${file}\u0026#34; ], \u0026#34;problemMatcher\u0026#34;: [ \u0026#34;$msCompile\u0026#34; ], \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true } } ] } Lưu ý: Đường dẫn đến VsDevCmd.bat có thể khác tùy thuộc vào phiên bản Visual Studio hoặc đường dẫn cài đặt. Bạn có thể tìm đường dẫn đến VsDevCmd.bat bằng cách mở Command Prompt và chạy dir \u0026quot;\\VsDevCmd*\u0026quot; /s.\nXử lý sự cố Thuật ngữ \u0026lsquo;cl.exe\u0026rsquo; không được nhận diện Nếu bạn thấy lỗi \u0026ldquo;The term \u0026lsquo;cl.exe\u0026rsquo; is not recognized as the name of a cmdlet, function, script file, or operable program\u0026rdquo;, điều này thường có nghĩa là bạn đang chạy VS Code bên ngoài Developer Command Prompt for Visual Studio và VS Code không biết đường dẫn đến trình biên dịch cl.exe.\nVS Code phải được khởi động từ Developer Command Prompt for Visual Studio, hoặc task phải được cấu hình để chạy bên ngoài Developer Command Prompt.\nBạn luôn có thể kiểm tra xem mình có đang chạy VS Code trong ngữ cảnh của Developer Command Prompt hay không bằng cách mở Terminal mới (kb(workbench.action.terminal.new)) và gõ \u0026lsquo;cl\u0026rsquo; để xác minh cl.exe có sẵn cho VS Code.\nlỗi nghiêm trọng C1034: assert.h: không có đường dẫn include nào được thiết lập Trong trường hợp này, cl.exe có sẵn cho VS Code thông qua biến môi trường PATH, nhưng VS Code vẫn cần được khởi động từ Developer Command Prompt for Visual Studio, hoặc được cấu hình để chạy bên ngoài Developer Command Prompt. Nếu không, cl.exe không có quyền truy cập vào các biến môi trường quan trọng như INCLUDE.\nCác bước tiếp theo Khám phá Hướng dẫn Người dùng VS Code. Xem lại Tổng quan về tiện ích mở rộng C++. Tạo một workspace mới, sao chép các tệp JSON .vscode của bạn vào đó, điều chỉnh các cài đặt cần thiết cho đường dẫn workspace mới, tên chương trình, và v.v., và bắt đầu lập trình! "
},
{
	"uri": "//localhost:1313/vi/3-c-syntax/",
	"title": "Cú pháp C",
	"tags": [],
	"description": "",
	"content": "Tổng quan Bạn đã từng thấy đoạn code sau đây vài lần trong các chương đầu tiên. Hãy cùng phân tích kỹ hơn để hiểu rõ từng phần:\nVí dụ #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello World!\u0026#34;); return 0; } Giải thích ví dụ Dòng 1: #include \u0026lt;stdio.h\u0026gt; là một thư viện header file cho phép chúng ta làm việc với các hàm input và output, như printf() (được sử dụng ở dòng 4). Header file bổ sung thêm các chức năng cho chương trình C.\nĐừng lo lắng nếu bạn chưa hiểu #include \u0026lt;stdio.h\u0026gt; hoạt động như thế nào. Hãy cứ xem nó như một thứ (gần như) luôn xuất hiện trong chương trình của bạn.\nDòng 2: Một dòng trống. C bỏ qua khoảng trắng. Nhưng chúng ta sử dụng nó để code dễ đọc hơn.\nDòng 3: Một thứ khác luôn xuất hiện trong chương trình C là main(). Đây được gọi là hàm. Bất kỳ code nào bên trong cặp ngoặc nhọn {} của nó sẽ được thực thi.\nDòng 4: printf() là một hàm được sử dụng để xuất/in text ra màn hình. Trong ví dụ của chúng ta, nó sẽ xuất ra \u0026ldquo;Hello World!\u0026rdquo;.\nLưu ý: Mỗi câu lệnh C kết thúc bằng dấu chấm phẩy ;\nMẹo: Phần thân của int main() cũng có thể được viết như sau:\nint main(){printf(\u0026#34;Hello World!\u0026#34;);return 0;} Tuy nhiên, viết nhiều dòng sẽ giúp code dễ đọc hơn.\nDòng 5: return 0 kết thúc hàm main().\nDòng 6: Đừng quên thêm dấu ngoặc nhọn đóng } để thực sự kết thúc hàm main.\nGiới thiệu về câu lệnh chương trình Một chương trình máy tính bao gồm một chuỗi các chỉ thị cho máy tính biết những hành động cần thực hiện. Trong ngôn ngữ lập trình, những chỉ thị này được gọi là câu lệnh (statements).\nCấu trúc câu lệnh cơ bản Ví dụ câu lệnh printf(\u0026#34;Hello World!\u0026#34;); Yêu cầu câu lệnh Mỗi câu lệnh phải kết thúc bằng dấu chấm phẩy (;) Quên dấu chấm phẩy sẽ dẫn đến lỗi biên dịch Ví dụ về lỗi printf(\u0026#34;Hello World!\u0026#34;) // Lỗi: Thiếu dấu chấm phẩy Cảnh báo: Kết quả biên dịch: error: expected ';' before 'return'\nNhiều câu lệnh Các chương trình thường chứa nhiều câu lệnh được thực thi tuần tự.\nVí dụ về nhiều câu lệnh printf(\u0026#34;Hello World!\u0026#34;); printf(\u0026#34;Have a good day!\u0026#34;); return 0; Thứ tự thực thi Các câu lệnh được thực thi theo thứ tự từ trên xuống dưới:\nCâu lệnh đầu tiên: Xuất ra \u0026ldquo;Hello World!\u0026rdquo; Câu lệnh thứ hai: Xuất ra \u0026ldquo;Have a good day!\u0026rdquo; Câu lệnh thứ ba: Trả về 0 để kết thúc chương trình thành công Các nguyên tắc thực hành tốt Luôn kết thúc câu lệnh bằng dấu chấm phẩy Viết mỗi câu lệnh trên một dòng để dễ đọc hơn Sử dụng thụt lề đúng để duy trì cấu trúc code Thêm comments để giải thích các câu lệnh phức tạp Tóm tắt Chương trình là danh sách các chỉ thị (câu lệnh) Câu lệnh phải kết thúc bằng dấu chấm phẩy Nhiều câu lệnh thực thi theo thứ tự tuần tự Cú pháp và định dạng đúng giúp cải thiện độ tin cậy của code "
},
{
	"uri": "//localhost:1313/vi/4-c-output/",
	"title": "Output và Input trong C",
	"tags": [],
	"description": "",
	"content": "Output và Input trong C Trong hướng dẫn này, chúng ta sẽ tìm hiểu cách tạo output text trong ngôn ngữ lập trình C, từ in ấn cơ bản đến output có định dạng.\nOutput Cơ Bản Nền tảng của output trong C là hàm printf(), được cung cấp từ thư viện input/output chuẩn. Dưới đây là ví dụ đơn giản:\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello World!\u0026#34;); return 0; } Làm Việc với Text String Text string trong C phải được đặt trong dấu ngoặc kép (\u0026quot;\u0026quot;). Hãy xem cách đúng và sai:\n✅ Cách đúng: printf(\u0026#34;Đây là text string hợp lệ\u0026#34;); ❌ Cách sai: printf(Cách này sẽ gây lỗi); Nhiều Lệnh Print Bạn có thể sử dụng nhiều lệnh printf() liên tiếp. Lưu ý rằng mặc định, printf() không tự động thêm xuống dòng:\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello World!\u0026#34;); printf(\u0026#34;Tôi đang học C.\u0026#34;); printf(\u0026#34;Và nó thật tuyệt vời!\u0026#34;); return 0; } Output:\nHello World!Tôi đang học C.Và nó thật tuyệt vời! Thêm Xuống Dòng Để tạo output dễ đọc hơn, sử dụng ký tự escape \\n để xuống dòng:\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello World!\\n\u0026#34;); printf(\u0026#34;Tôi đang học C.\\n\u0026#34;); printf(\u0026#34;Và nó thật tuyệt vời!\\n\u0026#34;); return 0; } Output:\nHello World!\rTôi đang học C.\rVà nó thật tuyệt vời! Mẹo Để Output Hiệu Quả Một số mẹo quan trọng cần nhớ khi làm việc với output trong C:\nLuôn include thư viện stdio.h Nhớ sử dụng dấu ngoặc kép cho text string Dùng \\n để xuống dòng Kết thúc mỗi câu lệnh bằng dấu chấm phẩy Kiểm tra các dấu ngoặc đóng mở đúng cặp Các Hàm Output Phổ Biến C cung cấp một số hàm cho output:\nprintf() - Output có định dạng với khả năng kiểm soát cách hiển thị puts() - Output string với tự động xuống dòng putchar() - Output một ký tự đơn Ví Dụ với Output Có Định Dạng Đây là cách sử dụng output có định dạng với các kiểu dữ liệu khác nhau:\n#include \u0026lt;stdio.h\u0026gt; int main() { int tuoi = 25; float chieuCao = 1.75; printf(\u0026#34;Tuổi: %d\\n\u0026#34;, tuoi); printf(\u0026#34;Chiều cao: %.2f mét\\n\u0026#34;, chieuCao); return 0; } Output:\nTuổi: 25\rChiều cao: 1.75 mét Bài Tập Thực Hành Tạo một chương trình in thông tin cá nhân của bạn với định dạng phù hợp. Bao gồm:\nTên của bạn Tuổi của bạn Ngôn ngữ lập trình yêu thích Mẫu Giải #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Tên: [Tên của bạn]\\n\u0026#34;); printf(\u0026#34;Tuổi: [Tuổi của bạn]\\n\u0026#34;); printf(\u0026#34;Ngôn ngữ yêu thích: [Ngôn ngữ]\\n\u0026#34;); return 0; } Output Mẫu Tên: Nguyễn Văn A\rTuổi: 25\rNgôn ngữ yêu thích: C Điểm Chính Cần Nhớ Luôn include thư viện cần thiết (stdio.h) Sử dụng định dạng string đúng với dấu ngoặc kép Nhớ dùng xuống dòng (\\n) để output dễ đọc Hiểu rõ các hàm output khác nhau Thực hành định dạng và tổ chức code đúng cách "
},
{
	"uri": "//localhost:1313/vi/5-c-comments/",
	"title": "Comments trong C",
	"tags": [],
	"description": "",
	"content": "Comments trong C Comments một dòng (Single-line Comments) Comments một dòng bắt đầu bằng hai dấu gạch chéo (//).\nBất kỳ đoạn text nào nằm giữa // và cuối dòng sẽ được trình biên dịch bỏ qua (sẽ không được thực thi).\nVí dụ - Comment trước code // Đây là một comment printf(\u0026#34;Hello World!\u0026#34;); Ví dụ - Comment sau code printf(\u0026#34;Hello World!\u0026#34;); // Đây là một comment Comments nhiều dòng (Multi-line Comments) Comments nhiều dòng bắt đầu với /* và kết thúc với */.\nBất kỳ đoạn text nào nằm giữa /* và */ sẽ được trình biên dịch bỏ qua:\nVí dụ /* Đoạn code dưới đây sẽ in ra dòng chữ Hello World! lên màn hình, và nó thật tuyệt vời */ printf(\u0026#34;Hello World!\u0026#34;); Nên dùng Comments một dòng hay nhiều dòng? Bạn có thể tùy ý lựa chọn loại comments phù hợp. Thông thường:\nSử dụng // cho các comments ngắn Sử dụng /* */ cho các comments dài hơn Lưu ý Trước phiên bản C99 (phát hành năm 1999), bạn chỉ có thể sử dụng comments nhiều dòng trong C.\n"
},
{
	"uri": "//localhost:1313/vi/6-c-variables/",
	"title": "Biến trong C",
	"tags": [],
	"description": "",
	"content": "Tổng quan Biến (Variables) đóng vai trò như các container để lưu trữ giá trị dữ liệu như số và ký tự trong lập trình C. Hiểu cách làm việc với biến là nền tảng cơ bản trong lập trình C.\nCác kiểu biến cơ bản Số nguyên (Integer - int) Lưu trữ số nguyên không có phần thập phân Ví dụ: 123, -123 Không có giá trị phân số hoặc thập phân Số thực (Float) Lưu trữ số có dấu thập phân Ví dụ: 19.99, -19.99 Phù hợp cho các phép tính chính xác Ký tự (Character - char) Lưu trữ một ký tự đơn Phải được đặt trong dấu nháy đơn Ví dụ: 'a', 'B' Khai báo biến Cú pháp cơ bản type tenBien = giaTri; Ví dụ khai báo // Khởi tạo trực tiếp int soToi = 15; // Khai báo và gán giá trị riêng biệt int soToi; // Khai báo biến soToi = 15; // Gán giá trị Xuất biến Sử dụng printf() Hàm printf() được dùng để hiển thị giá trị biến trong C.\n// Cách sai int soToi = 15; printf(soToi); // Cách này không hoạt động // Cách đúng int soToi = 15; printf(\u0026#34;%d\u0026#34;, soToi); // Sẽ hiển thị 15 Format Specifiers Khi xuất biến, sử dụng các format specifiers sau:\n%d - cho số nguyên (int) %f - cho số thực (float) %c - cho ký tự đơn (char) Format Specifiers nâng cao Bảng Format Specifiers Specifier Kiểu dữ liệu Ví dụ giá trị %d int 42 %f float 3.14 %c char \u0026lsquo;A\u0026rsquo; %s string \u0026ldquo;Hello\u0026rdquo; %lf double 3.14159265359 %x hoặc %X hexadecimal 0xFF %o octal 075 %p pointer 0x7ffee2d7e8f0 Ví dụ về độ rộng và độ chính xác float pi = 3.14159; printf(\u0026#34;Mặc định: %f\\n\u0026#34;, pi); // 3.141590 printf(\u0026#34;Độ rộng 8: %8f\\n\u0026#34;, pi); // 3.141590 printf(\u0026#34;Độ chính xác 2: %.2f\\n\u0026#34;, pi); // 3.14 Những thực hành tốt nhất Chọn tên biến có ý nghĩa mô tả Khởi tạo giá trị cho biến khi khai báo Sử dụng kiểu dữ liệu phù hợp cho giá trị Tuân thủ quy tắc đặt tên nhất quán Lỗi thường gặp cần tránh Quên khởi tạo giá trị cho biến Sử dụng biến trước khi khai báo In biến mà không dùng format specifiers Dùng sai format specifiers với kiểu dữ liệu Bài tập thực hành Tạo chương trình sử dụng các kiểu biến khác nhau:\n#include \u0026lt;stdio.h\u0026gt; int main() { // Khai báo biến int tuoi = 25; float chieuCao = 5.9; char xepLoai = \u0026#39;A\u0026#39;; // Xuất với format specifiers phù hợp printf(\u0026#34;Tuổi: %d\\n\u0026#34;, tuoi); printf(\u0026#34;Chiều cao: %.1f\\n\u0026#34;, chieuCao); printf(\u0026#34;Xếp loại: %c\\n\u0026#34;, xepLoai); return 0; } Ví dụ thực tế Quản lý dữ liệu sinh viên // Lưu trữ dữ liệu sinh viên int maSV = 15; int tuoiSV = 23; float hocPhi = 75.25; char xepLoai = \u0026#39;B\u0026#39;; // In thông tin sinh viên printf(\u0026#34;Mã SV: %d\\n\u0026#34;, maSV); printf(\u0026#34;Tuổi SV: %d\\n\u0026#34;, tuoiSV); printf(\u0026#34;Học phí: %.2f\\n\u0026#34;, hocPhi); printf(\u0026#34;Xếp loại: %c\\n\u0026#34;, xepLoai); Tính diện tích hình chữ nhật // Biến cho kích thước hình chữ nhật int chieuDai = 4; int chieuRong = 6; int dienTich; // Tính diện tích dienTich = chieuDai * chieuRong; // Hiển thị kết quả printf(\u0026#34;Chiều dài: %d\\n\u0026#34;, chieuDai); printf(\u0026#34;Chiều rộng: %d\\n\u0026#34;, chieuRong); printf(\u0026#34;Diện tích: %d đơn vị vuông\\n\u0026#34;, dienTich); Khai báo nhiều biến Bạn có thể khai báo nhiều biến theo nhiều cách:\n// Khai báo ngăn cách bằng dấu phẩy int x = 5, y = 6, z = 50; // Cùng giá trị cho nhiều biến int a, b, c; a = b = c = 100; // Khai báo riêng từng dòng cho rõ ràng int chieuCao = 180; int canNang = 75; int tuoi = 25; Kết luận Hiểu về biến và cách sử dụng đúng là điều quan trọng trong lập trình C. Hãy nhớ:\nChọn kiểu dữ liệu phù hợp Khởi tạo biến trước khi sử dụng Dùng format specifiers đúng Tuân thủ quy tắc đặt tên nhất quán Thực hành với ví dụ thực tế Để tìm hiểu thêm các chủ đề nâng cao và bài tập, hãy xem phần tiếp theo về cấu trúc điều khiển trong C.\n"
},
{
	"uri": "//localhost:1313/vi/7-c-data-types/",
	"title": "Các kiểu dữ liệu trong C",
	"tags": [],
	"description": "",
	"content": "Tổng quan Chương này đề cập đến các kiểu dữ liệu cơ bản trong lập trình C, bao gồm cách khai báo biến và sử dụng format specifier cho các thao tác input/output.\nBiến cơ bản và Format Specifier Trong ngôn ngữ C, mỗi biến phải có một kiểu dữ liệu xác định. Dưới đây là cách tạo và in các loại biến khác nhau:\n// Khai báo biến int myNum = 5; // Số nguyên float myFloatNum = 5.99; // Số thực char myLetter = \u0026#39;D\u0026#39;; // Ký tự // In biến printf(\u0026#34;%d\\n\u0026#34;, myNum); printf(\u0026#34;%f\\n\u0026#34;, myFloatNum); printf(\u0026#34;%c\\n\u0026#34;, myLetter); Các kiểu dữ liệu cơ bản Các kiểu dữ liệu cơ bản trong C gồm:\nKiểu dữ liệu Kích thước Mô tả Ví dụ int 2 hoặc 4 bytes Lưu trữ số nguyên không có phần thập phân 1 float 4 bytes Lưu trữ số thực (độ chính xác 6-7 chữ số thập phân) 1.99 double 8 bytes Lưu trữ số thực (độ chính xác 15 chữ số thập phân) 1.99 char 1 byte Lưu trữ một ký tự/chữ cái/số hoặc giá trị ASCII \u0026lsquo;A\u0026rsquo; Format Specifier Khi sử dụng hàm printf(), mỗi kiểu dữ liệu cần format specifier riêng:\nFormat Specifier Kiểu dữ liệu Cách dùng %d hoặc %i int In số nguyên %f hoặc %F float In số thực %lf double In số thực độ chính xác kép %c char In ký tự đơn %s string In chuỗi ký tự Làm việc với ký tự Kiểu dữ liệu char Trong C, ký tự được lưu trữ bằng kiểu char và phải được đặt trong dấu nháy đơn:\nchar myGrade = \u0026#39;A\u0026#39;; printf(\u0026#34;%c\u0026#34;, myGrade); Giá trị ASCII Ký tự cũng có thể được biểu diễn bằng giá trị ASCII:\nchar a = 65, b = 66, c = 67; // Biểu diễn \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39; printf(\u0026#34;%c%c%c\u0026#34;, a, b, c); // In ra: ABC Làm việc với số Số nguyên Với số nguyên, sử dụng kiểu dữ liệu int:\nint myNum = 1000; printf(\u0026#34;%d\u0026#34;, myNum); Số thực Với số thập phân, có thể chọn giữa float và double:\nfloat myFloat = 5.75; printf(\u0026#34;%f\u0026#34;, myFloat); double myDouble = 19.99; printf(\u0026#34;%lf\u0026#34;, myDouble); Ký hiệu khoa học Số lớn có thể được biểu diễn bằng ký hiệu khoa học:\nfloat f1 = 35e3; // 35 x 10^3 double d1 = 12E4; // 12 x 10^4 printf(\u0026#34;%f\\n\u0026#34;, f1); // Kết quả: 35000.000000 printf(\u0026#34;%lf\u0026#34;, d1); // Kết quả: 120000.000000 Một số lưu ý quan trọng Khớp Format Specifier\nLuôn sử dụng format specifier chính xác cho mỗi kiểu dữ liệu Format specifier không khớp có thể gây ra hành vi không mong muốn Lựa chọn kiểu dữ liệu\nDùng int cho số nguyên Ưu tiên dùng double thay vì float cho tính toán chính xác Chỉ dùng char cho ký tự đơn Cân nhắc bộ nhớ\nXem xét kích thước kiểu dữ liệu khi làm việc với bộ nhớ giới hạn Dùng float thay vì double khi không cần độ chính xác cao Lỗi thường gặp Lưu trữ ký tự\nchar myText = \u0026#39;Hello\u0026#39;; // Sai! Phải dùng string char myText[] = \u0026#34;Hello\u0026#34;; // Đúng với nhiều ký tự Sử dụng sai Format Specifier\nint num = 42; printf(\u0026#34;%f\u0026#34;, num); // Sai! Phải dùng %d cho số nguyên printf(\u0026#34;%d\u0026#34;, num); // Đúng Nội dung tiếp theo Trong các chương sau, chúng ta sẽ tìm hiểu:\nArray và string Chuyển đổi kiểu Hằng số và literal Các kiểu dữ liệu nâng cao Nhớ biên dịch code với các flag phù hợp để phát hiện lỗi liên quan đến kiểu dữ liệu. Khuyến nghị sử dụng -Wall với gcc.\n"
},
{
	"uri": "//localhost:1313/vi/8-c-constants/",
	"title": "Hằng số trong lập trình C",
	"tags": [],
	"description": "",
	"content": "Hằng số trong lập trình C Hằng số (Constants) là các biến mà giá trị của chúng không thể thay đổi sau khi được khai báo. Chúng cung cấp cách tạo các giá trị chỉ đọc trong chương trình của bạn.\nKhai báo hằng số Để khai báo một hằng số, sử dụng từ khóa const trước kiểu dữ liệu:\nconst int myNum = 15; // myNum sẽ luôn là 15 // myNum = 10; // LỖI: Không thể thay đổi giá trị của hằng số Các trường hợp sử dụng phổ biến Hằng số lý tưởng cho các giá trị cần được giữ nguyên trong suốt quá trình thực thi chương trình:\nconst int MINUTES_PER_HOUR = 60; const float PI = 3.14; Các quy tắc quan trọng Quy tắc 1: Bắt buộc khởi tạo giá trị ngay lập tức Hằng số phải được khởi tạo giá trị khi khai báo:\n// Cách đúng: const int MINUTES_PER_HOUR = 60; // Cách sai - sẽ gây lỗi: // const int MINUTES_PER_HOUR; // MINUTES_PER_HOUR = 60; Quy tắc 2: Quy ước đặt tên Mặc dù không bắt buộc bởi ngôn ngữ, nhưng theo quy ước tốt là đặt tên hằng số bằng chữ in hoa:\n// Quy ước đặt tên được khuyến nghị const int BIRTH_YEAR = 1980; const float MAX_TEMPERATURE = 100.0; Quy ước này giúp hằng số dễ dàng phân biệt với các biến thông thường trong mã của bạn và được sử dụng rộng rãi bởi các lập trình viên C.\nLợi ích của việc sử dụng hằng số Ngăn chặn việc vô tình thay đổi giá trị Giúp code dễ bảo trì hơn Cải thiện khả năng đọc hiểu code Giúp phát hiện lỗi tiềm ẩn trong quá trình biên dịch Lưu ý rằng việc cố gắng thay đổi giá trị của hằng số sau khi khai báo sẽ dẫn đến lỗi biên dịch, điều này giúp bạn duy trì tính toàn vẹn dữ liệu trong chương trình.\n"
},
{
	"uri": "//localhost:1313/vi/9-c-operators/",
	"title": "Toán tử trong C",
	"tags": [],
	"description": "",
	"content": "Toán tử trong lập trình C Toán tử được sử dụng để thực hiện các phép tính trên biến và giá trị.\nCách sử dụng cơ bản Trong C, toán tử có thể được dùng để thực hiện tính toán với giá trị và biến:\nint myNum = 100 + 50; // Phép cộng cơ bản với giá trị // Phép tính với biến và giá trị int sum1 = 100 + 50; // 150 (100 + 50) int sum2 = sum1 + 250; // 400 (150 + 250) int sum3 = sum2 + sum2; // 800 (400 + 400) Các loại toán tử trong C C cung cấp một số loại toán tử sau:\nToán tử số học Toán tử gán Toán tử so sánh Toán tử logic Toán tử thao tác bit Toán tử số học Các toán tử này thực hiện các phép tính toán thông dụng:\nToán tử Tên Mô tả Ví dụ + Cộng Cộng hai giá trị x + y - Trừ Trừ các giá trị x - y * Nhân Nhân các giá trị x * y / Chia Chia các giá trị x / y % Chia lấy dư Trả về số dư x % y ++ Tăng Tăng thêm 1 ++x \u0026ndash; Giảm Giảm đi 1 \u0026ndash;x Toán tử gán Toán tử gán dùng để gán giá trị cho biến:\nint x = 10; // Phép gán cơ bản x += 5; // Phép gán cộng (tương đương x = x + 5) Danh sách đầy đủ các toán tử gán:\nToán tử Ví dụ Tương đương = x = 5 x = 5 += x += 3 x = x + 3 -= x -= 3 x = x - 3 *= x *= 3 x = x * 3 /= x /= 3 x = x / 3 %= x %= 3 x = x % 3 \u0026amp;= x \u0026amp;= 3 x = x \u0026amp; 3 |= x |= 3 x = x | 3 ^= x ^= 3 x = x ^ 3 \u0026raquo;= x \u0026raquo;= 3 x = x \u0026raquo; 3 \u0026laquo;= x \u0026laquo;= 3 x = x \u0026laquo; 3 Toán tử so sánh Toán tử so sánh trả về giá trị boolean (1 là đúng, 0 là sai):\nint x = 5; int y = 3; printf(\u0026#34;%d\u0026#34;, x \u0026gt; y); // Trả về 1 (đúng) vì 5 \u0026gt; 3 Danh sách toán tử so sánh:\nToán tử Tên Ví dụ Mô tả == Bằng x == y Trả về 1 nếu các giá trị bằng nhau != Khác x != y Trả về 1 nếu các giá trị khác nhau \u0026gt; Lớn hơn x \u0026gt; y Trả về 1 nếu x lớn hơn y \u0026lt; Nhỏ hơn x \u0026lt; y Trả về 1 nếu x nhỏ hơn y \u0026gt;= Lớn hơn hoặc bằng x \u0026gt;= y Trả về 1 nếu x lớn hơn hoặc bằng y \u0026lt;= Nhỏ hơn hoặc bằng x \u0026lt;= y Trả về 1 nếu x nhỏ hơn hoặc bằng y Toán tử logic Toán tử logic kết hợp nhiều điều kiện:\nToán tử Tên Ví dụ Mô tả \u0026amp;\u0026amp; AND x \u0026lt; 5 \u0026amp;\u0026amp; x \u0026lt; 10 Trả về 1 nếu cả hai điều kiện đều đúng || OR x \u0026lt; 5 || x \u0026lt; 4 Trả về 1 nếu ít nhất một điều kiện đúng ! NOT !(x \u0026lt; 5) Trả về 1 nếu điều kiện sai "
},
{
	"uri": "//localhost:1313/vi/10-c-booleans/",
	"title": "Kiểu dữ liệu Boolean",
	"tags": [],
	"description": "",
	"content": "Kiểu dữ liệu Boolean trong C Trong lập trình, bạn thường cần một kiểu dữ liệu chỉ có thể nhận một trong hai giá trị:\nYES / NO ON / OFF TRUE / FALSE C cung cấp kiểu dữ liệu bool (boolean) để biểu diễn các giá trị hoặc là true hoặc false.\nKhai báo biến Boolean Khác với int hay char, kiểu bool không được tích hợp sẵn trong C. Nó được giới thiệu trong C99 và yêu cầu phải import:\n#include \u0026lt;stdbool.h\u0026gt; Khai báo biến boolean sử dụng từ khóa bool:\nbool isProgrammingFun = true; bool isFishTasty = false; In giá trị Boolean Boolean được biểu diễn nội bộ dưới dạng số nguyên:\n1 (hoặc bất kỳ số khác 0) biểu thị cho true 0 biểu thị cho false Sử dụng định dạng %d để in giá trị boolean:\n// Tạo biến boolean bool isProgrammingFun = true; bool isFishTasty = false; // In giá trị boolean printf(\u0026#34;%d\u0026#34;, isProgrammingFun); // Trả về 1 (true) printf(\u0026#34;%d\u0026#34;, isFishTasty); // Trả về 0 (false) So sánh giá trị và biến Giá trị boolean thường là kết quả của việc so sánh giữa các giá trị và biến. Những phép so sánh này giúp đưa ra quyết định trong chương trình.\nSử dụng toán tử so sánh:\n// So sánh giá trị printf(\u0026#34;%d\u0026#34;, 10 \u0026gt; 9); // Trả về 1 (true) // So sánh biến int x = 10; int y = 9; printf(\u0026#34;%d\u0026#34;, x \u0026gt; y); // Trả về 1 (true) Sử dụng toán tử bằng (==):\nprintf(\u0026#34;%d\u0026#34;, 10 == 10); // Trả về 1 (true) printf(\u0026#34;%d\u0026#34;, 10 == 15); // Trả về 0 (false) printf(\u0026#34;%d\u0026#34;, 5 == 55); // Trả về 0 (false) Bạn cũng có thể so sánh các biến boolean:\nbool isHamburgerTasty = true; bool isPizzaTasty = true; // So sánh giá trị boolean printf(\u0026#34;%d\u0026#34;, isHamburgerTasty == isPizzaTasty); // Trả về 1 (true) Quan trọng: Luôn nhớ include file header \u0026lt;stdbool.h\u0026gt; khi làm việc với biến boolean.\n"
},
{
	"uri": "//localhost:1313/vi/11-c-if-else/",
	"title": "Câu lệnh điều kiện trong C",
	"tags": [],
	"description": "",
	"content": "Câu lệnh điều kiện trong C Các điều kiện logic C hỗ trợ các điều kiện logic toán học tiêu chuẩn:\nNhỏ hơn: a \u0026lt; b Nhỏ hơn hoặc bằng: a \u0026lt;= b Lớn hơn: a \u0026gt; b Lớn hơn hoặc bằng: a \u0026gt;= b Bằng: a == b Không bằng: a != b Các điều kiện này cho phép thực hiện các hành động khác nhau dựa trên logic quyết định.\nCác loại câu lệnh điều kiện C cung cấp một số câu lệnh điều kiện:\nif - Thực thi code khi điều kiện đúng else - Thực thi code khi điều kiện sai else if - Kiểm tra điều kiện mới khi điều kiện trước đó sai switch - Thực thi các khối code khác nhau dựa trên nhiều điều kiện Câu lệnh if Câu lệnh if sẽ thực thi một khối code khi điều kiện được chỉ định là đúng.\nCú pháp if (condition) { // khối code được thực thi nếu điều kiện đúng } Lưu ý: if phải viết thường. Sử dụng If hoặc IF sẽ gây ra lỗi biên dịch.\nVí dụ Kiểm tra giá trị số:\nif (20 \u0026gt; 18) { printf(\u0026#34;20 lớn hơn 18\u0026#34;); } Kiểm tra biến:\nint x = 20; int y = 18; if (x \u0026gt; y) { printf(\u0026#34;x lớn hơn y\u0026#34;); } Giải thích ví dụ Trong ví dụ biến ở trên:\nTa khai báo hai biến: x có giá trị 20 và y có giá trị 18 Câu lệnh if kiểm tra xem x có lớn hơn y không bằng toán tử \u0026gt; Do 20 lớn hơn 18 nên điều kiện là đúng Chương trình in ra màn hình \u0026ldquo;x lớn hơn y\u0026rdquo; Câu lệnh else trong C Câu lệnh else cho phép bạn thực thi một khối code khác khi điều kiện if là sai. Điều này tạo ra cấu trúc quyết định nhị phân trong chương trình của bạn.\nCú pháp if (condition) { // khối code được thực thi khi điều kiện đúng } else { // khối code được thực thi khi điều kiện sai } Ví dụ Đây là một ví dụ đơn giản kiểm tra thời gian và in lời chào phù hợp:\nint time = 20; if (time \u0026lt; 18) { printf(\u0026#34;Chào ngày mới.\u0026#34;); } else { printf(\u0026#34;Chào buổi tối.\u0026#34;); } // Kết quả: \u0026#34;Chào buổi tối.\u0026#34; Cách hoạt động Đầu tiên, điều kiện trong câu lệnh if được đánh giá Nếu điều kiện là false (trong trường hợp này, 20 không nhỏ hơn 18) Chương trình bỏ qua khối code đầu tiên Chương trình thực thi khối code sau câu lệnh else Trong ví dụ này, nó in ra \u0026ldquo;Chào buổi tối.\u0026rdquo; Các trường hợp sử dụng phổ biến Bạn có thể sử dụng câu lệnh if...else cho nhiều tình huống:\n// Kiểm tra số dương hay âm int number = -5; if (number \u0026gt;= 0) { printf(\u0026#34;Số này là số dương.\u0026#34;); } else { printf(\u0026#34;Số này là số âm.\u0026#34;); } // Kiểm tra học sinh đậu hay rớt int score = 75; int passingGrade = 60; if (score \u0026gt;= passingGrade) { printf(\u0026#34;Học sinh đậu!\u0026#34;); } else { printf(\u0026#34;Học sinh rớt.\u0026#34;); } Các nguyên tắc thực hành tốt Luôn sử dụng dấu ngoặc nhọn {} ngay cả với câu lệnh đơn Giữ các khối code thụt lề đúng để dễ đọc hơn Đảm bảo điều kiện được viết rõ ràng và dễ hiểu Cân nhắc sử dụng else if khi cần kiểm tra nhiều điều kiện Lưu ý rằng câu lệnh else là tùy chọn - bạn có thể sử dụng câu lệnh if mà không cần else khi chỉ cần thực thi code cho điều kiện đúng.\nCâu lệnh else if Sử dụng câu lệnh else if để chỉ định một điều kiện mới nếu điều kiện đầu tiên là sai.\nCú pháp if (condition1) { // khối code được thực thi nếu condition1 đúng } else if (condition2) { // khối code được thực thi nếu condition1 sai và condition2 đúng } else { // khối code được thực thi nếu condition1 sai và condition2 sai } Ví dụ int time = 22; if (time \u0026lt; 10) { printf(\u0026#34;Chào buổi sáng.\u0026#34;); } else if (time \u0026lt; 20) { printf(\u0026#34;Chào ngày mới.\u0026#34;); } else { printf(\u0026#34;Chào buổi tối.\u0026#34;); } // Kết quả là \u0026#34;Chào buổi tối.\u0026#34; Trong ví dụ này:\nNếu time nhỏ hơn 10, in ra \u0026ldquo;Chào buổi sáng\u0026rdquo; Nếu time nhỏ hơn 20 (nhưng lớn hơn hoặc bằng 10), in ra \u0026ldquo;Chào ngày mới\u0026rdquo; Nếu cả hai điều kiện đều sai (time lớn hơn hoặc bằng 20), in ra \u0026ldquo;Chào buổi tối\u0026rdquo; Kết quả là \u0026ldquo;Chào buổi tối\u0026rdquo; vì biến time là 22, lớn hơn cả 10 và 20, khiến code thực thi khối else.\n"
},
{
	"uri": "//localhost:1313/vi/12-c-switch/",
	"title": "Switch Statement trong C",
	"tags": [],
	"description": "",
	"content": "Switch Statement trong C Trong lập trình C, switch statement cung cấp một cách hiệu quả thay thế cho nhiều câu lệnh if-else. Nó cho phép bạn chọn một khối code từ nhiều lựa chọn dựa trên một biểu thức cụ thể.\nCú pháp cơ bản switch (expression) { case x: // khối code break; case y: // khối code break; default: // khối code } Cách hoạt động Switch statement hoạt động bằng cách:\nĐánh giá biểu thức một lần So sánh giá trị của biểu thức với từng case Thực thi khối code của case phù hợp Sử dụng break để thoát khỏi khối switch Chuyển sang default nếu không có case nào khớp Ví dụ: Tên các ngày trong tuần int day = 4; switch (day) { case 1: printf(\u0026#34;Monday\u0026#34;); break; case 2: printf(\u0026#34;Tuesday\u0026#34;); break; case 3: printf(\u0026#34;Wednesday\u0026#34;); break; case 4: printf(\u0026#34;Thursday\u0026#34;); break; case 5: printf(\u0026#34;Friday\u0026#34;); break; case 6: printf(\u0026#34;Saturday\u0026#34;); break; case 7: printf(\u0026#34;Sunday\u0026#34;); break; } // Kết quả là \u0026#34;Thursday\u0026#34; (ngày 4) Từ khóa break Câu lệnh break phục vụ một số mục đích quan trọng:\nThoát khỏi khối switch Ngăn việc thực thi các case tiếp theo Cải thiện hiệu quả thực thi Tránh hành vi fall-through không mong muốn Từ khóa default Default cung cấp một lựa chọn dự phòng khi không có case nào khớp:\nint day = 4; switch (day) { case 6: printf(\u0026#34;Hôm nay là thứ bảy\u0026#34;); break; case 7: printf(\u0026#34;Hôm nay là chủ nhật\u0026#34;); break; default: printf(\u0026#34;Đang mong đợi đến cuối tuần\u0026#34;); } // Kết quả là \u0026#34;Đang mong đợi đến cuối tuần\u0026#34; Những điểm quan trọng về default:\nPhải là câu lệnh cuối cùng trong switch Không yêu cầu câu lệnh break Được thực thi khi không có case nào khớp Là tùy chọn nhưng được khuyến nghị để xử lý lỗi "
},
{
	"uri": "//localhost:1313/vi/13-c-while-loop/",
	"title": "Vòng lặp trong lập trình C",
	"tags": [],
	"description": "",
	"content": "Vòng lặp trong lập trình C Loops (vòng lặp) có thể thực thi một khối lệnh cho đến khi một điều kiện cụ thể được thỏa mãn. Chúng rất hữu ích vì:\nTiết kiệm thời gian Giảm thiểu lỗi Làm cho code dễ đọc hơn Vòng lặp While Vòng lặp while thực thi một khối lệnh lặp đi lặp lại miễn là điều kiện được chỉ định còn đúng.\nCú pháp while (condition) { // khối lệnh cần thực thi } Ví dụ Trong ví dụ này, code trong vòng lặp sẽ chạy lặp đi lặp lại miễn là biến i nhỏ hơn 5:\nint i = 0; while (i \u0026lt; 5) { printf(\u0026#34;%d\\n\u0026#34;, i); i++; } Lưu ý: Đừng quên tăng giá trị của biến được sử dụng trong điều kiện (i++), nếu không vòng lặp sẽ không bao giờ kết thúc!\nKết quả của đoạn code trên sẽ là:\n0\r1\r2\r3 4 Trong ví dụ này:\nChúng ta khởi tạo i bằng 0 Vòng lặp while kiểm tra nếu i nhỏ hơn 5 Nếu đúng, nó in ra giá trị của i Sau đó tăng i lên 1 Quá trình này lặp lại cho đến khi i đạt giá trị 5, lúc này điều kiện trở thành sai và vòng lặp kết thúc Vòng lặp Do/While Vòng lặp do/while là một biến thể của vòng lặp while. Vòng lặp này sẽ thực thi khối lệnh một lần trước khi kiểm tra điều kiện, sau đó nó sẽ lặp lại miễn là điều kiện còn đúng.\nCú pháp do { // khối lệnh cần thực thi } while (condition); Ví dụ dưới đây sử dụng vòng lặp do/while. Vòng lặp sẽ luôn được thực thi ít nhất một lần, kể cả khi điều kiện sai, vì khối lệnh được thực thi trước khi điều kiện được kiểm tra:\nVí dụ int i = 0; do { printf(\u0026#34;%d\\n\u0026#34;, i); i++; } while (i \u0026lt; 5); Kết quả sẽ là:\n0\r1\r2\r3\r4 "
},
{
	"uri": "//localhost:1313/vi/14-c-for-loop/",
	"title": "Vòng lặp For trong C",
	"tags": [],
	"description": "",
	"content": "Vòng lặp For trong C Khi bạn cần lặp một khối code với số lần cụ thể, vòng lặp for thường phù hợp hơn vòng lặp while.\nCú pháp for (biểu thức 1; biểu thức 2; biểu thức 3) { // khối lệnh cần thực thi } Ba biểu thức trong vòng lặp for có các mục đích khác nhau:\nBiểu thức 1: Khởi tạo biến lặp và chỉ thực thi một lần trước khi vòng lặp bắt đầu Biểu thức 2: Xác định điều kiện để thực thi khối lệnh - vòng lặp tiếp tục khi điều kiện đúng Biểu thức 3: Thực thi sau mỗi lần lặp, thường dùng để cập nhật biến lặp Ví dụ Dưới đây là ví dụ đơn giản in các số từ 0 đến 4:\nint i; for (i = 0; i \u0026lt; 5; i++) { printf(\u0026#34;%d\\n\u0026#34;, i); } Cách hoạt động Hãy phân tích ví dụ trên:\ni = 0: Khởi tạo biến đếm bằng 0 i \u0026lt; 5: Vòng lặp tiếp tục chừng nào i nhỏ hơn 5 i++: Tăng i lên 1 đơn vị sau mỗi lần lặp Kết quả sẽ là:\n0\r1 2\r3\r4 Vòng lặp này sẽ thực thi đúng 5 lần, với i nhận các giá trị từ 0 đến 4. Khi i đạt giá trị 5, điều kiện i \u0026lt; 5 trở thành sai và vòng lặp kết thúc.\nVòng lặp lồng nhau trong C Trong lập trình C, bạn có thể đặt một vòng lặp bên trong vòng lặp khác, tạo thành vòng lặp lồng nhau.\nKhi sử dụng vòng lặp lồng nhau, vòng lặp bên trong sẽ hoàn thành tất cả các lần lặp của nó cho mỗi lần lặp của vòng lặp bên ngoài.\nVí dụ int i, j; // Vòng lặp ngoài for (i = 1; i \u0026lt;= 2; ++i) { printf(\u0026#34;Ngoài: %d\\n\u0026#34;, i); // Thực thi 2 lần // Vòng lặp trong for (j = 1; j \u0026lt;= 3; ++j) { printf(\u0026#34; Trong: %d\\n\u0026#34;, j); // Thực thi 6 lần (2 * 3) } } Kết quả: Ngoài: 1\rTrong: 1\rTrong: 2\rTrong: 3\rNgoài: 2\rTrong: 1\rTrong: 2\rTrong: 3 Quy trình thực thi: Vòng lặp ngoài chạy 2 lần (i = 1, 2) Với mỗi lần lặp của vòng ngoài: Vòng lặp trong chạy 3 lần (j = 1, 2, 3) Tổng số lần lặp của vòng trong: 2 × 3 = 6 lần "
},
{
	"uri": "//localhost:1313/vi/15-c-break-and-continue/",
	"title": "Câu lệnh Break và Continue trong C",
	"tags": [],
	"description": "",
	"content": "Câu lệnh Break và Continue trong C Câu lệnh Break Câu lệnh break cho phép bạn thoát hoặc \u0026ldquo;nhảy ra khỏi\u0026rdquo; một vòng lặp ngay lập tức. Nó thường được sử dụng trong cả vòng lặp và câu lệnh switch.\nVí dụ Break trong vòng lặp For int i; for (i = 0; i \u0026lt; 10; i++) { if (i == 4) { break; } printf(\u0026#34;%d\\n\u0026#34;, i); } Đoạn mã trên sẽ in các số từ 0 đến 3, sau đó dừng lại khi i bằng 4.\nCâu lệnh Continue Câu lệnh continue bỏ qua phần còn lại của lần lặp hiện tại và chuyển sang lần lặp tiếp theo. Khác với break, nó không thoát khỏi vòng lặp hoàn toàn.\nVí dụ Continue trong vòng lặp For int i; for (i = 0; i \u0026lt; 10; i++) { if (i == 4) { continue; } printf(\u0026#34;%d\\n\u0026#34;, i); } Đoạn mã trên sẽ in tất cả các số từ 0 đến 9, ngoại trừ số 4.\nSử dụng Break và Continue trong vòng lặp While Break trong vòng lặp While int i = 0; while (i \u0026lt; 10) { if (i == 4) { break; } printf(\u0026#34;%d\\n\u0026#34;, i); i++; } Continue trong vòng lặp While int i = 0; while (i \u0026lt; 10) { if (i == 4) { i++; continue; } printf(\u0026#34;%d\\n\u0026#34;, i); i++; } Những khác biệt chính giữa break và continue:\nbreak kết thúc toàn bộ vòng lặp continue chỉ bỏ qua lần lặp hiện tại Với continue trong vòng lặp while, cần nhớ cập nhật bộ đếm trước câu lệnh continue để tránh vòng lặp vô hạn "
},
{
	"uri": "//localhost:1313/vi/16-summary/",
	"title": "Tóm tắt",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Workshop này cung cấp một cái nhìn toàn diện về ngôn ngữ lập trình C, từ những khái niệm cơ bản đến các kỹ thuật lập trình nâng cao. Khóa học được thiết kế để giúp người học nắm vững nền tảng và phát triển kỹ năng lập trình C một cách có hệ thống.\nNội dung chương trình Phần 1: Nền tảng Giới thiệu về CS50 Lập trình bằng ngôn ngữ C Cú pháp C Output và Input trong C Phần 2: Cơ bản Comments trong C Biến trong C Các kiểu dữ liệu trong C Hằng số trong lập trình C Toán tử trong C C Syntax Phần 3: Cấu trúc điều khiển Câu lệnh điều kiện trong C Switch Statement trong C Vòng lặp trong lập trình C Vòng lặp For trong C Câu lệnh Break và Continue trong C Mục tiêu học tập Hiểu và áp dụng được các khái niệm cơ bản trong lập trình C Nắm vững cú pháp và quy tắc của ngôn ngữ C Thực hành với các cấu trúc điều khiển khác nhau Phát triển kỹ năng giải quyết vấn đề thông qua lập trình Xây dựng nền tảng vững chắc cho việc học các ngôn ngữ lập trình khác Phương pháp học Học lý thuyết kết hợp với thực hành Làm bài tập và ví dụ thực tế Thảo luận và giải quyết vấn đề Xây dựng project nhỏ để áp dụng kiến thức Đối tượng phù hợp Người mới bắt đầu học lập trình Sinh viên CNTT Những người muốn củng cố kiến thức nền tảng về C Những người quan tâm đến phát triển phần mềm Yêu cầu tiền đề Không yêu cầu kinh nghiệm lập trình trước đó Cần có máy tính và môi trường phát triển C cơ bản Tinh thần học tập và sẵn sàng thực hành Kết quả mong đợi Sau khi hoàn thành workshop, học viên sẽ:\nCó khả năng viết các chương trình C cơ bản Hiểu rõ về cú pháp và cấu trúc của ngôn ngữ C Có thể tự học và phát triển các kỹ năng lập trình nâng cao Sẵn sàng cho việc học các ngôn ngữ lập trình khác Kết luận Ngôn ngữ lập trình C là một trong những nền tảng quan trọng nhất trong lĩnh vực khoa học máy tính và phát triển phần mềm. Workshop này được thiết kế để cung cấp một hành trình học tập toàn diện, từ những khái niệm cơ bản nhất đến các kỹ thuật lập trình thiết yếu. Thông qua việc học C, học viên không chỉ nắm vững một ngôn ngữ lập trình mạnh mẽ mà còn phát triển tư duy logic và kỹ năng giải quyết vấn đề - những yếu tố cốt lõi cho sự phát triển trong ngành công nghệ thông tin.\nVới cấu trúc chương trình được tổ chức theo thứ tự từ dễ đến khó, kết hợp giữa lý thuyết và thực hành, workshop tạo điều kiện tốt nhất để học viên có thể tiếp thu và áp dụng kiến thức một cách hiệu quả. Đặc biệt, việc bắt đầu với CS50 - một khóa học nổi tiếng về khoa học máy tính, cho thấy workshop được xây dựng trên nền tảng giáo dục được kiểm chứng và đáng tin cậy.\nKiến thức và kỹ năng thu được từ workshop này sẽ là bàn đạp vững chắc, không chỉ cho việc phát triển các ứng dụng bằng C mà còn hỗ trợ việc học tập các ngôn ngữ lập trình hiện đại khác. Trong thời đại số hóa ngày nay, những hiểu biết sâu sắc về ngôn ngữ C sẽ là lợi thế đáng kể cho bất kỳ ai muốn xây dựng sự nghiệp trong lĩnh vực công nghệ thông tin.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]