[
{
	"uri": "//localhost:1313/",
	"title": "CS50 Week 1 - C Programming",
	"tags": [],
	"description": "",
	"content": "Introduction to C Programming Welcome to Week 1 of CS50! This module introduces you to the fundamentals of programming using the C language.\nLearning Objectives By the end of this module, you will be able to:\nWrite basic programs in C Understand core programming concepts Work with variables and data types Implement conditional logic Create loops for repetitive tasks Use operators and functions Workshop Contents Introduction How to Program in C C Syntax C Output C Comments C Variables C Data Types C Constants C Operators C Booleans C If-Else C Switch C While Loop C For Loop C Break and Continue Summary Estimated duration Total Workshop Duration: ~2 hours Theory: 45 minutes Practical Exercise: 75 minutes Prerequisites Basic understanding of computer operations Text editor or IDE installed C compiler (GCC recommended) "
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "Introduction to CS50",
	"tags": [],
	"description": "",
	"content": "Overview CS50 is Harvard University\u0026rsquo;s premier introductory course to Computer Science, led by Professor David J. Malan. This foundational course serves as a comprehensive entry point into the world of computing, covering essential concepts and practical programming skills.\nCourse Components The course curriculum encompasses several key areas that form the backbone of computer science education:\nComputer Science Fundamentals The course begins with core theoretical concepts that underpin all of computing:\nAbstraction - Learning to manage complexity by hiding implementation details Algorithms - Studying systematic problem-solving approaches and their efficiency Data Structures - Understanding how to organize and manage data effectively Encapsulation - Mastering the principle of bundling data with methods that operate on that data Resource Management - Learning how to efficiently utilize computer resources like memory and processing power Security \u0026amp; Engineering Practices Modern software development requires a strong foundation in:\nSoftware Engineering Principles - Best practices for writing maintainable, scalable code Security Concepts - Understanding common vulnerabilities and how to protect against them Web Development Fundamentals - Learning how to build secure and efficient web applications Programming Languages Throughout the course, you\u0026rsquo;ll gain hands-on experience with multiple programming languages:\nC - Understanding low-level programming and memory management Python - Learning high-level programming and rapid development SQL - Mastering database management and queries JavaScript - Creating interactive web experiences HTML \u0026amp; CSS - Building structured and styled web content Getting Started Week 1 marks the beginning of our journey with C programming, establishing a strong foundation in programming concepts and computational thinking. This module introduces:\nCore Concepts Basic Syntax and Program Structure\nUnderstanding how to write and organize C programs Learning the rules and conventions of the C language Variables and Data Types\nWorking with integers, floats, and characters Understanding type conversion and limitations Control Flow and Conditional Statements\nMastering if-else conditions Implementing loops and switches Understanding program execution flow Functions and Memory Management\nCreating and using functions Understanding stack vs heap memory Managing memory allocation and deallocation Info: This workshop is adapted from Harvard\u0026rsquo;s CS50 curriculum and optimized for an AWS learning environment. All content is designed to align with CS50\u0026rsquo;s academic standards while providing practical applications in cloud computing contexts.\nNext Steps After completing this introduction, you\u0026rsquo;ll be ready to:\nSet up your development environment Write your first C program Begin exploring fundamental programming concepts Start thinking computationally about problem-solving "
},
{
	"uri": "//localhost:1313/2-how-to-program-in-c/",
	"title": "How to Program in C",
	"tags": [],
	"description": "",
	"content": "Configure VS Code for Microsoft C++ In this tutorial, you configure Visual Studio Code to use the Microsoft Visual C++ compiler and debugger on Windows.\nAfter configuring VS Code, you will compile and debug a simple Hello World program in VS Code. This tutorial does not teach you details about the Microsoft C++ toolset or the C++ language. For those subjects, there are many good resources available on the Web.\nIf you have any problems, feel free to file an issue for this tutorial in the VS Code documentation repository.\nPrerequisites To successfully complete this tutorial, you must do the following:\nInstall Visual Studio Code\nInstall the C/C++ extension for VS Code. You can install the C/C++ extension by searching for \u0026lsquo;c++\u0026rsquo; in the Extensions view (kb(workbench.view.extensions)).\nInstall the Microsoft Visual C++ (MSVC) compiler toolset.\nIf you have a recent version of Visual Studio, open the Visual Studio Installer from the Windows Start menu and verify that the C++ workload is checked. If it\u0026rsquo;s not installed, then check the box and select the Modify button in the installer.\nYou can also install the Desktop development with C++ workload without a full Visual Studio IDE installation. From the Visual Studio Downloads page, scroll down until you see Tools for Visual Studio under the All Downloads section and select the download for Build Tools for Visual Studio 2022.\nThis will launch the Visual Studio Installer, which will bring up a dialog showing the available Visual Studio Build Tools workloads. Check the Desktop development with C++ workload and select Install.\nNote: You can use the C++ toolset from Visual Studio Build Tools along with Visual Studio Code to compile, build, and verify any C++ codebase as long as you also have a valid Visual Studio license (either Community, Pro, or Enterprise) that you are actively using to develop that C++ codebase.\nCheck your Microsoft Visual C++ installation To use MSVC from a command line or VS Code, you must run from a Developer Command Prompt for Visual Studio. An ordinary shell such as PowerShell, Bash, or the Windows command prompt does not have the necessary path environment variables set.\nTo open the Developer Command Prompt for VS, start typing \u0026lsquo;developer\u0026rsquo; in the Windows Start menu, and you should see it appear in the list of suggestions. The exact name depends on which version of Visual Studio or the Visual Studio Build Tools you have installed. Select the item to open the prompt.\nYou can test that you have the C++ compiler, cl.exe, installed correctly by typing \u0026lsquo;cl\u0026rsquo; and you should see a copyright message with the version and basic usage description.\nIf the Developer Command Prompt is using the BuildTools location as the starting directory (you wouldn\u0026rsquo;t want to put projects there), navigate to your user folder (C:\\users\\{your username}\\) before you start creating new projects.\nNote: If for some reason you can\u0026rsquo;t run VS Code from a Developer Command Prompt, you can find a workaround for building C++ projects with VS Code in Run VS Code outside a Developer Command Prompt.\nCreate Hello World From the Developer Command Prompt, create an empty folder called \u0026ldquo;projects\u0026rdquo; where you can store all your VS Code projects, then create a subfolder called \u0026ldquo;helloworld\u0026rdquo;, navigate into it, and open VS Code (code) in that folder (.) by entering the following commands:\nmkdir projects cd projects mkdir helloworld cd helloworld code . The \u0026ldquo;code .\u0026rdquo; command opens VS Code in the current working folder, which becomes your \u0026ldquo;workspace\u0026rdquo;. As you go through the tutorial, you will see three files created in a .vscode folder in the workspace:\ntasks.json (build instructions) launch.json (debugger settings) c_cpp_properties.json (compiler path and IntelliSense settings) Add a source code file In the File Explorer title bar, select the New File button and name the file helloworld.cpp.\nAdd hello world source code Now paste in this source code:\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int main() { vector\u0026lt;string\u0026gt; msg {\u0026#34;Hello\u0026#34;, \u0026#34;C++\u0026#34;, \u0026#34;World\u0026#34;, \u0026#34;from\u0026#34;, \u0026#34;VS Code\u0026#34;, \u0026#34;and the C++ extension!\u0026#34;}; for (const string\u0026amp; word : msg) { cout \u0026lt;\u0026lt; word \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } cout \u0026lt;\u0026lt; endl; } Now press kb(workbench.action.files.save) to save the file. Notice how the file you just added appears in the File Explorer view (kb(workbench.view.explorer)) in the side bar of VS Code:\nYou can also enable Auto Save to automatically save your file changes, by checking Auto Save in the main File menu.\nThe Activity Bar on the far left lets you open different views such as Search, Source Control, and Run. You\u0026rsquo;ll look at the Run view later in this tutorial. You can find out more about the other views in the VS Code User Interface documentation.\nNote: When you save or open a C++ file, you may see a notification from the C/C++ extension about the availability of an Insiders version, which lets you test new features and fixes. You can ignore this notification by selecting the X (Clear Notification).\nExplore IntelliSense In your new helloworld.cpp file, hover over vector or string to see type information. After the declaration of the msg variable, start typing msg. as you would when calling a member function. You should immediately see a completion list that shows all the member functions, and a window that shows the type information for the msg object:\nYou can press the kbstyle(Tab) key to insert the selected member; then, when you add the opening parenthesis, you will see information about any arguments that the function requires.\nRun helloworld.cpp Remember, the C++ extension uses the C++ compiler you have installed on your machine to build your program. Make sure you have a C++ compiler installed before attempting to run and debug helloworld.cpp in VS Code.\nOpen helloworld.cpp so that it is the active file. Press the play button in the top right corner of the editor. Choose C/C++: cl.exe build and debug active file from the list of detected compilers on your system. You\u0026rsquo;ll only be asked to choose a compiler the first time you run helloworld.cpp. This compiler will be set as the \u0026ldquo;default\u0026rdquo; compiler in tasks.json file.\nAfter the build succeeds, your program\u0026rsquo;s output will appear in the integrated Terminal. If you get an error trying to build and debug with cl.exe, make sure you have started VS Code from the Developer Command Prompt for Visual Studio using the code . shortcut.\nThe first time you run your program, the C++ extension creates tasks.json, which you\u0026rsquo;ll find in your project\u0026rsquo;s .vscode folder. tasks.json stores build configurations.\nYour new tasks.json file should look similar to the JSON below:\n{ \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;tasks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;C/C++: cl.exe build active file\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;cl.exe\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;/Zi\u0026#34;, \u0026#34;/EHsc\u0026#34;, \u0026#34;/Fe:\u0026#34;, \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, \u0026#34;${file}\u0026#34; ], \u0026#34;problemMatcher\u0026#34;: [ \u0026#34;$msCompile\u0026#34; ], \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true }, \u0026#34;detail\u0026#34;: \u0026#34;Task generated by Debugger.\u0026#34; } ] } Note: You can learn more about tasks.json variables in the variables reference.\nThe command setting specifies the program to run; in this case that is \u0026ldquo;cl.exe\u0026rdquo;. The args array specifies the command-line arguments that will be passed to cl.exe. These arguments must be specified in the order expected by the compiler.\nThis task tells the C++ compiler to take the active file (${file}), compile it, and create an executable file (/Fe: switch) in the current directory (${fileDirname}) with the same name as the active file but with the .exe extension (${fileBasenameNoExtension}.exe), resulting in helloworld.exe for our example.\nThe label value is what you will see in the tasks list; you can name this whatever you like.\nThe detail value is what you will as the description of the task in the tasks list. It\u0026rsquo;s highly recommended to rename this value to differentiate it from similar tasks.\nThe problemMatcher value selects the output parser to use for finding errors and warnings in the compiler output. For cl.exe, you\u0026rsquo;ll get the best results if you use the $msCompile problem matcher.\nFrom now on, the play button will read from tasks.json to figure out how to build and run your program. You can define multiple build tasks in tasks.json, and whichever task is marked as the default will be used by the play button. In case you need to change the default compiler, you can run Tasks: Configure default build task. Alternatively you can modify the tasks.json file and remove the default by replacing this segment:\n\u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true }, with this:\n\u0026#34;group\u0026#34;: \u0026#34;build\u0026#34;, Modifying tasks.json You can modify your tasks.json to build multiple C++ files by using an argument like \u0026quot;${workspaceFolder}/*.cpp\u0026quot; instead of \u0026quot;${file}\u0026quot;.This will build all .cpp files in your current folder. You can also modify the output filename by replacing \u0026quot;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026quot; with a hard-coded filename (for example \u0026quot;${workspaceFolder}\\\\myProgram.exe\u0026quot;).\nDebug helloworld.cpp To debug your code,\nGo back to helloworld.cpp so that it is the active file. Set a breakpoint by clicking on the editor margin or using F9 on the current line. From the drop-down next to the play button, select Debug C/C++ File. Choose C/C++: cl.exe build and debug active file from the list of detected compilers on your system (you\u0026rsquo;ll only be asked to choose a compiler the first time you run or debug helloworld.cpp). The play button has two modes: Run C/C++ File and Debug C/C++ File. It will default to the last-used mode. If you see the debug icon in the play button, you can select the play button to debug, instead of selecting the drop-down menu item.\nIf you get an error trying to build and debug with cl.exe, make sure you have started VS Code from the Developer Command Prompt for Visual Studio using the code . shortcut.\nExplore the debugger Before you start stepping through the code, let\u0026rsquo;s take a moment to notice several changes in the user interface:\nThe Integrated Terminal appears at the bottom of the source code editor. In the Debug Output tab, you see output that indicates the debugger is up and running. The editor highlights the line where you set a breakpoint before starting the debugger: The Run and Debug view on the left shows debugging information. You\u0026rsquo;ll see an example later in the tutorial.\nAt the top of the code editor, a debugging control panel appears. You can move this around the screen by grabbing the dots on the left side.\nStep through the code Now you\u0026rsquo;re ready to start stepping through the code.\nClick or press the Step over icon in the debugging control panel. This will advance program execution to the first line of the for loop, and skip over all the internal function calls within the vector and string classes that are invoked when the msg variable is created and initialized. Notice the change in the Variables window on the left.\nIn this case, the errors are expected because, although the variable names for the loop are now visible to the debugger, the statement has not executed yet, so there is nothing to read at this point. The contents of msg are visible, however, because that statement has completed.\nPress Step over again to advance to the next statement in this program (skipping over all the internal code that is executed to initialize the loop). Now, the Variables window shows information about the loop variables. Press Step over again to execute the cout statement. (Note that the C++ extension does not print any output to the Debug Console until the loop exits.) If you like, you can keep pressing Step over until all the words in the vector have been printed to the console. But if you are curious, try pressing the Step Into button to step through source code in the C++ standard library! To return to your own code, one way is to keep pressing Step over. Another way is to set a breakpoint in your code by switching to the helloworld.cpp tab in the code editor, putting the insertion point somewhere on the cout statement inside the loop, and pressing kb(editor.debug.action.toggleBreakpoint). A red dot appears in the gutter on the left to indicate that a breakpoint has been set on this line.\nThen press kb(workbench.action.debug.start) to start execution from the current line in the standard library header. Execution will break on cout. If you like, you can press kb(editor.debug.action.toggleBreakpoint) again to toggle off the breakpoint.\nSet a watch Sometimes you might want to keep track of the value of a variable as your program executes. You can do this by setting a watch on the variable.\nPlace the insertion point inside the loop. In the Watch window, select the plus sign and in the text box, type word, which is the name of the loop variable. Now view the Watch window as you step through the loop. Add another watch by adding this statement before the loop: int i = 0;. Then, inside the loop, add this statement: ++i;. Now add a watch for i as you did in the previous step.\nTo quickly view the value of any variable while execution is paused on a breakpoint, you can hover over it with the mouse pointer.\nCustomize debugging with launch.json When you debug with the play button or kb(workbench.action.debug.start), the C++ extension creates a dynamic debug configuration on the fly.\nThere are cases where you\u0026rsquo;d want to customize your debug configuration, such as specifying arguments to pass to the program at runtime. You can define custom debug configurations in a launch.json file.\nTo create launch.json, choose Add Debug Configuration from the play button drop-down menu.\nYou\u0026rsquo;ll then see a dropdown for various predefined debugging configurations. Choose C/C++: cl.exe build and debug active file.\nVS Code creates a launch.json file, which looks something like this:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;C/C++: cl.exe build and debug active file\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;cppvsdbg\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, \u0026#34;args\u0026#34;: [], \u0026#34;stopAtEntry\u0026#34;: false, \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026#34;environment\u0026#34;: [], \u0026#34;externalConsole\u0026#34;: false, \u0026#34;preLaunchTask\u0026#34;: \u0026#34;C/C++: cl.exe build active file\u0026#34; } ] } In the JSON above, program specifies the program you want to debug. Here it is set to the active file folder (${fileDirname}) and active filename with the .exe extension (${fileBasenameNoExtension}.exe), which if helloworld.cpp is the active file will be helloworld.exe. The args property is an array of arguments to pass to the program at runtime.\nBy default, the C++ extension won\u0026rsquo;t add any breakpoints to your source code and the stopAtEntry value is set to false.\nChange the stopAtEntry value to true to cause the debugger to stop on the main method when you start debugging.\nFrom now on, the play button and kb(workbench.action.debug.start) will read from your launch.json file when launching your program for debugging.\nC/C++ configurations If you want more control over the C/C++ extension, you can create a c_cpp_properties.json file, which will allow you to change settings such as the path to the compiler, include paths, C++ standard (default is C++17), and more.\nYou can view the C/C++ configuration UI by running the command C/C++: Edit Configurations (UI) from the Command Palette (kb(workbench.action.showCommands)).\nThis opens the C/C++ Configurations page. When you make changes here, VS Code writes them to a file called c_cpp_properties.json in the .vscode folder.\nVisual Studio Code places these settings in .vscode\\c_cpp_properties.json. If you open that file directly, it should look something like this:\n{ \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Win32\u0026#34;, \u0026#34;includePath\u0026#34;: [ \u0026#34;${workspaceFolder}/**\u0026#34; ], \u0026#34;defines\u0026#34;: [ \u0026#34;_DEBUG\u0026#34;, \u0026#34;UNICODE\u0026#34;, \u0026#34;_UNICODE\u0026#34; ], \u0026#34;windowsSdkVersion\u0026#34;: \u0026#34;10.0.18362.0\u0026#34;, \u0026#34;compilerPath\u0026#34;: \u0026#34;C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe\u0026#34;, \u0026#34;cStandard\u0026#34;: \u0026#34;c11\u0026#34;, \u0026#34;cppStandard\u0026#34;: \u0026#34;c++17\u0026#34;, \u0026#34;intelliSenseMode\u0026#34;: \u0026#34;msvc-x64\u0026#34; } ], \u0026#34;version\u0026#34;: 4 } You only need to add to the Include path array setting if your program includes header files that are not in your workspace or in the standard library path.\nCompiler path The compilerPath setting is an important setting in your configuration. The extension uses it to infer the path to the C++ standard library header files. When the extension knows where to find those files, it can provide useful features like smart completions and Go to Definition navigation.\nThe C/C++ extension attempts to populate compilerPath with the default compiler location based on what it finds on your system. The extension looks in several common compiler locations.\nThe compilerPath search order is:\nFirst check for the Microsoft Visual C++ compilerOpe Then look for g++ on Windows Subsystem for Linux (WSL) Then g++ for Mingw-w64. If you have g++ or WSL installed, you might need to change compilerPath to match the preferred compiler for your project. For Microsoft C++, the path should look something like this, depending on which specific version you have installed: \u0026ldquo;C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64/cl.exe\u0026rdquo;.\nReusing your C++ configuration VS Code is now configured to use the Microsoft C++ compiler. The configuration applies to the current workspace. To reuse the configuration, just copy the JSON files to a .vscode folder in a new project folder (workspace) and change the names of the source file(s) and executable as needed.\nRun VS Code outside the Developer Command Prompt In certain circumstances, it isn\u0026rsquo;t possible to run VS Code from Developer Command Prompt for Visual Studio (for example, in Remote Development through SSH scenarios). In that case, you can automate initialization of Developer Command Prompt for Visual Studio during the build using the following tasks.json configuration:\n{ \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;windows\u0026#34;: { \u0026#34;options\u0026#34;: { \u0026#34;shell\u0026#34;: { \u0026#34;executable\u0026#34;: \u0026#34;cmd.exe\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;/C\u0026#34;, // The path to VsDevCmd.bat depends on the version of Visual Studio you have installed. \u0026#34;\\\u0026#34;C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/Tools/VsDevCmd.bat\\\u0026#34;\u0026#34;, \u0026#34;\u0026amp;\u0026amp;\u0026#34; ] } } }, \u0026#34;tasks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;cl.exe build active file\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;cl.exe\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;/Zi\u0026#34;, \u0026#34;/EHsc\u0026#34;, \u0026#34;/Fe:\u0026#34;, \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, \u0026#34;${file}\u0026#34; ], \u0026#34;problemMatcher\u0026#34;: [ \u0026#34;$msCompile\u0026#34; ], \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true } } ] } Note: The path to VsDevCmd.bat might be different depending on the Visual Studio version or installation path. You can find the path to VsDevCmd.bat by opening a Command Prompt and running dir \u0026quot;\\VsDevCmd*\u0026quot; /s.\nTroubleshooting The term \u0026lsquo;cl.exe\u0026rsquo; is not recognized If you see the error \u0026ldquo;The term \u0026lsquo;cl.exe\u0026rsquo; is not recognized as the name of a cmdlet, function, script file, or operable program.\u0026rdquo;, this usually means you are running VS Code outside of a Developer Command Prompt for Visual Studio and VS Code doesn\u0026rsquo;t know the path to the cl.exe compiler.\nVS Code must either be started from the Developer Command Prompt for Visual Studio, or the task must be configured to run outside a Developer Command Prompt.\nYou can always check that you are running VS Code in the context of the Developer Command Prompt by opening a new Terminal (kb(workbench.action.terminal.new)) and typing \u0026lsquo;cl\u0026rsquo; to verify cl.exe is available to VS Code.\nfatal error C1034: assert.h: no include path set In this case, cl.exe is available to VS Code through the PATH environment variable, but VS Code still needs to either be started from the Developer Command Prompt for Visual Studio, or be configured to run outside the Developer Command Prompt. Otherwise, cl.exe does not have access to important environment variables such as INCLUDE.\nNext steps Explore the VS Code User Guide. Review the Overview of the C++ extension. Create a new workspace, copy your .vscode JSON files to it, adjust the necessary settings for the new workspace path, program name, and so on, and start coding! "
},
{
	"uri": "//localhost:1313/3-c-syntax/",
	"title": "C Syntax",
	"tags": [],
	"description": "",
	"content": "Overview You have already seen the following code a couple of times in the first chapters. Let\u0026rsquo;s break it down to understand it better:\nExample #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello World!\u0026#34;); return 0; } Example Explained Line 1: #include \u0026lt;stdio.h\u0026gt; is a header file library that lets us work with input and output functions, such as printf() (used in line 4). Header files add functionality to C programs.\nDon\u0026rsquo;t worry if you don\u0026rsquo;t understand how #include \u0026lt;stdio.h\u0026gt; works. Just think of it as something that (almost) always appears in your program.\nLine 2: A blank line. C ignores white space. But we use it to make the code more readable.\nLine 3: Another thing that always appear in a C program is main(). This is called a function. Any code inside its curly brackets {} will be executed.\nLine 4: printf() is a function used to output/print text to the screen. In our example, it will output \u0026ldquo;Hello World!\u0026rdquo;.\nNote: Every C statement ends with a semicolon ;\nTip: The body of int main() could also been written as:\nint main(){printf(\u0026#34;Hello World!\u0026#34;);return 0;} However, multiple lines makes the code more readable.\nLine 5: return 0 ends the main() function.\nLine 6: Do not forget to add the closing curly bracket } to actually end the main function.\nIntroduction to Program Statements A computer program consists of a sequence of instructions that tell the computer what actions to perform. In programming languages, these instructions are called statements.\nBasic Statement Structure Statement Example printf(\u0026#34;Hello World!\u0026#34;); Statement Requirements Each statement must end with a semicolon (;) Forgetting the semicolon leads to compilation errors Error Example printf(\u0026#34;Hello World!\u0026#34;) // Error: Missing semicolon Warning: Compiler Output: error: expected ';' before 'return'\nMultiple Statements Programs typically contain multiple statements that execute sequentially.\nExample of Multiple Statements printf(\u0026#34;Hello World!\u0026#34;); printf(\u0026#34;Have a good day!\u0026#34;); return 0; Execution Order Statements are executed in order from top to bottom:\nFirst statement: Outputs \u0026ldquo;Hello World!\u0026rdquo; Second statement: Outputs \u0026ldquo;Have a good day!\u0026rdquo; Third statement: Returns 0 to end the program successfully Best Practices Always end statements with semicolons Write one statement per line for better readability Use proper indentation to maintain code structure Add comments to explain complex statements Summary Programs are lists of instructions (statements) Statements must end with semicolons Multiple statements execute in sequential order Proper syntax and formatting improve code reliability "
},
{
	"uri": "//localhost:1313/4-c-output/",
	"title": "Output and Text Printing in C",
	"tags": [],
	"description": "",
	"content": "Output and Text Printing in C In this guide, we\u0026rsquo;ll explore how to create text output in C programming language, covering everything from basic printing to formatted output.\nBasic Output The foundation of output in C is the printf() function, which comes from the standard input/output library. Here\u0026rsquo;s a simple example:\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello World!\u0026#34;); return 0; } Working with Text Strings Text strings in C must be enclosed in double quotation marks (\u0026quot;\u0026quot;). Let\u0026rsquo;s look at the correct and incorrect ways:\n✅ Correct way: printf(\u0026#34;This is a valid text string\u0026#34;); ❌ Incorrect way: printf(This will cause an error); Multiple Print Statements You can use multiple printf() statements in sequence. Note that by default, printf() doesn\u0026rsquo;t automatically add line breaks:\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello World!\u0026#34;); printf(\u0026#34;I am learning C.\u0026#34;); printf(\u0026#34;And it is awesome!\u0026#34;); return 0; } Output:\nHello World!I am learning C.And it is awesome! Adding Line Breaks To create more readable output, use the \\n escape character for line breaks:\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello World!\\n\u0026#34;); printf(\u0026#34;I am learning C.\\n\u0026#34;); printf(\u0026#34;And it is awesome!\\n\u0026#34;); return 0; } Output:\nHello World!\rI am learning C.\rAnd it is awesome! Tips for Effective Output Here are some essential tips to remember when working with output in C:\nAlways include the stdio.h header file Remember to use double quotes for text strings Use \\n for new lines End each statement with a semicolon Check for proper closing parentheses Common Output Functions C provides several functions for output:\nprintf() - Formatted output with control over presentation puts() - String output with automatic newline putchar() - Single character output Example with Formatted Output Here\u0026rsquo;s how to use formatted output with different data types:\n#include \u0026lt;stdio.h\u0026gt; int main() { int age = 25; float height = 1.75; printf(\u0026#34;Age: %d\\n\u0026#34;, age); printf(\u0026#34;Height: %.2f meters\\n\u0026#34;, height); return 0; } Output:\nAge: 25\rHeight: 1.75 meters Practice Exercise Create a program that prints your personal information with proper formatting. Include:\nYour name Your age Your favorite programming language Solution Template #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Name: [Your name]\\n\u0026#34;); printf(\u0026#34;Age: [Your age]\\n\u0026#34;); printf(\u0026#34;Favorite Language: [Language]\\n\u0026#34;); return 0; } Example Output Name: John Doe\rAge: 25\rFavorite Language: C Key Takeaways Always include necessary header files (stdio.h) Use proper string formatting with double quotes Remember line breaks (\\n) for readable output Understand different output functions Practice proper code formatting and organization "
},
{
	"uri": "//localhost:1313/5-c-comments/",
	"title": "Comments in C",
	"tags": [],
	"description": "",
	"content": "Comments in C Single-line Comments Single-line comments start with two forward slashes (//).\nAny text between // and the end of the line is ignored by the compiler (will not be executed).\nExample - Comment Before Code // This is a comment printf(\u0026#34;Hello World!\u0026#34;); Example - Comment After Code printf(\u0026#34;Hello World!\u0026#34;); // This is a comment Multi-line Comments Multi-line comments start with /* and end with */.\nAny text between /* and */ will be ignored by the compiler:\nExample /* The code below will print the words Hello World! to the screen, and it is amazing */ printf(\u0026#34;Hello World!\u0026#34;); Single or Multi-line Comments? It is up to you which you want to use. Typically:\nUse // for short comments Use /* */ for longer comments Note Before version C99 (released in 1999), you could only use multi-line comments in C.\n"
},
{
	"uri": "//localhost:1313/6-c-variables/",
	"title": "C Variables",
	"tags": [],
	"description": "",
	"content": "Overview Variables serve as containers for storing data values, such as numbers and characters in C programming. Understanding how to work with variables is fundamental to C programming.\nBasic Variable Types Integer (int) Stores whole numbers without decimals Examples: 123, -123 No fractional or decimal values Float (float) Stores numbers with decimal points Examples: 19.99, -19.99 Suitable for precise calculations Character (char) Stores single characters Must be surrounded by single quotes Examples: 'a', 'B' Variable Declaration Basic Syntax type variableName = value; Example Declarations // Direct initialization int myNum = 15; // Declaration and assignment separately int myNum; // Declare variable myNum = 15; // Assign value Variable Output Using printf() The printf() function is used to display variable values in C.\n// Incorrect way int myNum = 15; printf(myNum); // This will not work // Correct way int myNum = 15; printf(\u0026#34;%d\u0026#34;, myNum); // This will display 15 Format Specifiers When outputting variables, use these format specifiers:\n%d - for integers %f - for floats %c - for single characters Advanced Format Specifiers Format Specifiers Table Specifier Data Type Example Value %d int 42 %f float 3.14 %c char \u0026lsquo;A\u0026rsquo; %s string \u0026ldquo;Hello\u0026rdquo; %lf double 3.14159265359 %x or %X hexadecimal 0xFF %o octal 075 %p pointer 0x7ffee2d7e8f0 Width and Precision Example float pi = 3.14159; printf(\u0026#34;Default: %f\\n\u0026#34;, pi); // 3.141590 printf(\u0026#34;Width 8: %8f\\n\u0026#34;, pi); // 3.141590 printf(\u0026#34;Precision 2: %.2f\\n\u0026#34;, pi); // 3.14 Best Practices Choose descriptive variable names Initialize variables when declaring them Use appropriate data types for your values Follow consistent naming conventions Common Mistakes to Avoid Forgetting to initialize variables Using variables before declaring them Trying to print variables without format specifiers Using incorrect format specifiers for data types Practice Exercise Create a program that utilizes different variable types:\n#include \u0026lt;stdio.h\u0026gt; int main() { // Variable declarations int age = 25; float height = 5.9; char grade = \u0026#39;A\u0026#39;; // Output with proper format specifiers printf(\u0026#34;Age: %d\\n\u0026#34;, age); printf(\u0026#34;Height: %.1f\\n\u0026#34;, height); printf(\u0026#34;Grade: %c\\n\u0026#34;, grade); return 0; } Real-World Examples Student Data Management // Student data storage int studentID = 15; int studentAge = 23; float studentFee = 75.25; char studentGrade = \u0026#39;B\u0026#39;; // Print student information printf(\u0026#34;Student ID: %d\\n\u0026#34;, studentID); printf(\u0026#34;Student Age: %d\\n\u0026#34;, studentAge); printf(\u0026#34;Student Fee: %.2f\\n\u0026#34;, studentFee); printf(\u0026#34;Student Grade: %c\\n\u0026#34;, studentGrade); Rectangle Area Calculator // Variables for rectangle dimensions int length = 4; int width = 6; int area; // Calculate area area = length * width; // Display results printf(\u0026#34;Length: %d\\n\u0026#34;, length); printf(\u0026#34;Width: %d\\n\u0026#34;, width); printf(\u0026#34;Area: %d square units\\n\u0026#34;, area); Multiple Variable Declarations You can declare multiple variables in several ways:\n// Comma-separated declaration int x = 5, y = 6, z = 50; // Same value to multiple variables int a, b, c; a = b = c = 100; // Separate lines for clarity int height = 180; int weight = 75; int age = 25; Conclusion Understanding variables and their proper usage is crucial for C programming. Remember to:\nChoose appropriate data types Initialize variables before use Use correct format specifiers Follow consistent naming conventions Practice with real-world examples For more advanced topics and exercises, check out our next section on control structures in C.\n"
},
{
	"uri": "//localhost:1313/7-c-data-types/",
	"title": "C Programming Data Types",
	"tags": [],
	"description": "",
	"content": "Overview This chapter covers the fundamental data types in C programming, including how to declare variables and use format specifiers for input/output operations.\nBasic Variables and Format Specifiers In C programming, every variable must have a specified data type. Here\u0026rsquo;s how to create and print different types of variables:\n// Creating variables int myNum = 5; // Integer (whole number) float myFloatNum = 5.99; // Floating point number char myLetter = \u0026#39;D\u0026#39;; // Character // Printing variables printf(\u0026#34;%d\\n\u0026#34;, myNum); printf(\u0026#34;%f\\n\u0026#34;, myFloatNum); printf(\u0026#34;%c\\n\u0026#34;, myLetter); Core Data Types The fundamental data types in C are:\nData Type Size Description Example int 2 or 4 bytes Stores whole numbers without decimals 1 float 4 bytes Stores fractional numbers (6-7 decimal digits precision) 1.99 double 8 bytes Stores fractional numbers (15 decimal digits precision) 1.99 char 1 byte Stores a single character/letter/number or ASCII value \u0026lsquo;A\u0026rsquo; Format Specifiers When using printf(), specific format specifiers are required for each data type:\nFormat Specifier Data Type Usage %d or %i int Print integer values %f or %F float Print floating-point numbers %lf double Print double precision numbers %c char Print single characters %s string Print text strings Working with Characters The char Data Type Characters in C are stored using the char data type and must be enclosed in single quotes:\nchar myGrade = \u0026#39;A\u0026#39;; printf(\u0026#34;%c\u0026#34;, myGrade); ASCII Values Characters can also be represented using their ASCII values:\nchar a = 65, b = 66, c = 67; // Represents \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39; printf(\u0026#34;%c%c%c\u0026#34;, a, b, c); // Prints: ABC Working with Numbers Integer Numbers For whole numbers, use the int data type:\nint myNum = 1000; printf(\u0026#34;%d\u0026#34;, myNum); Floating-Point Numbers For decimal numbers, choose between float and double:\nfloat myFloat = 5.75; printf(\u0026#34;%f\u0026#34;, myFloat); double myDouble = 19.99; printf(\u0026#34;%lf\u0026#34;, myDouble); Scientific Notation Large numbers can be represented using scientific notation:\nfloat f1 = 35e3; // 35 x 10^3 double d1 = 12E4; // 12 x 10^4 printf(\u0026#34;%f\\n\u0026#34;, f1); // Outputs: 35000.000000 printf(\u0026#34;%lf\u0026#34;, d1); // Outputs: 120000.000000 Best Practices and Tips Format Specifier Matching\nAlways use the correct format specifier for each data type Mismatched specifiers can cause unexpected behavior Type Selection\nUse int for whole numbers Use double instead of float for precise calculations Use char for single characters only Memory Considerations\nConsider the size of data types when working with limited memory Use float instead of double when lower precision is acceptable Common Pitfalls Character Storage\nchar myText = \u0026#39;Hello\u0026#39;; // Wrong! Use string instead char myText[] = \u0026#34;Hello\u0026#34;; // Correct for multiple characters Format Specifier Misuse\nint num = 42; printf(\u0026#34;%f\u0026#34;, num); // Wrong! Use %d for integers printf(\u0026#34;%d\u0026#34;, num); // Correct Next Steps In the following chapters, we\u0026rsquo;ll explore:\nArrays and strings Type conversion Constants and literals Advanced data types Remember to compile your code with appropriate flags to catch potential type-related errors. Using -Wall with gcc is recommended.\n"
},
{
	"uri": "//localhost:1313/8-c-constants/",
	"title": "Constants in C Programming",
	"tags": [],
	"description": "",
	"content": "Constants in C Programming Constants are variables whose values cannot be modified after declaration. They provide a way to create read-only values in your programs.\nDeclaring Constants To declare a constant, use the const keyword before the data type:\nconst int myNum = 15; // myNum will always be 15 // myNum = 10; // ERROR: Cannot modify a constant variable Common Use Cases Constants are ideal for values that should remain unchanged throughout program execution:\nconst int MINUTES_PER_HOUR = 60; const float PI = 3.14; Important Rules Rule 1: Immediate Initialization Required Constants must be initialized when they are declared:\n// Correct way: const int MINUTES_PER_HOUR = 60; // Wrong way - will cause an error: // const int MINUTES_PER_HOUR; // MINUTES_PER_HOUR = 60; Rule 2: Naming Convention While not required by the language, it\u0026rsquo;s considered good practice to name constants using uppercase letters:\n// Recommended naming convention const int BIRTH_YEAR = 1980; const float MAX_TEMPERATURE = 100.0; This convention makes constants easily distinguishable from regular variables in your code and is widely used by C programmers.\nBenefits of Using Constants Prevents accidental value modifications Makes code more maintainable Improves code readability Helps catch potential errors at compile time Remember that trying to modify a constant after declaration will result in a compilation error, helping you maintain data integrity in your programs.\n"
},
{
	"uri": "//localhost:1313/9-c-operators/",
	"title": "C Programming Operators",
	"tags": [],
	"description": "",
	"content": "C Programming Operators Operators are used to perform operations on variables and values.\nBasic Usage In C, operators can be used to perform calculations with values and variables:\nint myNum = 100 + 50; // Basic addition with values // Operations with variables and values int sum1 = 100 + 50; // 150 (100 + 50) int sum2 = sum1 + 250; // 400 (150 + 250) int sum3 = sum2 + sum2; // 800 (400 + 400) Categories of C Operators C provides several categories of operators:\nArithmetic operators Assignment operators Comparison operators Logical operators Bitwise operators Arithmetic Operators These operators perform common mathematical operations:\nOperator Name Description Example + Addition Adds two values x + y - Subtraction Subtracts values x - y * Multiplication Multiplies values x * y / Division Divides values x / y % Modulus Returns remainder x % y ++ Increment Increases by 1 ++x \u0026ndash; Decrement Decreases by 1 \u0026ndash;x Assignment Operators Assignment operators assign values to variables:\nint x = 10; // Basic assignment x += 5; // Addition assignment (same as x = x + 5) Full list of assignment operators:\nOperator Example Equivalent = x = 5 x = 5 += x += 3 x = x + 3 -= x -= 3 x = x - 3 *= x *= 3 x = x * 3 /= x /= 3 x = x / 3 %= x %= 3 x = x % 3 \u0026amp;= x \u0026amp;= 3 x = x \u0026amp; 3 |= x |= 3 x = x | 3 ^= x ^= 3 x = x ^ 3 \u0026raquo;= x \u0026raquo;= 3 x = x \u0026raquo; 3 \u0026laquo;= x \u0026laquo;= 3 x = x \u0026laquo; 3 Comparison Operators Comparison operators return boolean values (1 for true, 0 for false):\nint x = 5; int y = 3; printf(\u0026#34;%d\u0026#34;, x \u0026gt; y); // Returns 1 (true) because 5 \u0026gt; 3 List of comparison operators:\nOperator Name Example Description == Equal to x == y Returns 1 if values are equal != Not equal x != y Returns 1 if values are not equal \u0026gt; Greater than x \u0026gt; y Returns 1 if x is greater than y \u0026lt; Less than x \u0026lt; y Returns 1 if x is less than y \u0026gt;= Greater than or equal x \u0026gt;= y Returns 1 if x is greater than or equal to y \u0026lt;= Less than or equal x \u0026lt;= y Returns 1 if x is less than or equal to y Logical Operators Logical operators combine multiple conditions:\nOperator Name Example Description \u0026amp;\u0026amp; AND x \u0026lt; 5 \u0026amp;\u0026amp; x \u0026lt; 10 Returns 1 if both conditions are true || OR x \u0026lt; 5 || x \u0026lt; 4 Returns 1 if at least one condition is true ! NOT !(x \u0026lt; 5) Returns 1 if the condition is false "
},
{
	"uri": "//localhost:1313/10-c-booleans/",
	"title": "C Booleans",
	"tags": [],
	"description": "",
	"content": "C Booleans In programming, you often need a data type that can only have one of two values:\nYES / NO ON / OFF TRUE / FALSE C provides the bool data type (booleans) to represent values that are either true or false.\nBoolean Variables Unlike int or char, the bool type is not built-in to C. It was introduced in C99 and requires importing:\n#include \u0026lt;stdbool.h\u0026gt; Declare boolean variables using the bool keyword:\nbool isProgrammingFun = true; bool isFishTasty = false; Printing Boolean Values Booleans are represented internally as integers:\n1 (or any non-zero number) represents true 0 represents false Use the %d format specifier to print boolean values:\n// Create boolean variables bool isProgrammingFun = true; bool isFishTasty = false; // Print boolean values printf(\u0026#34;%d\u0026#34;, isProgrammingFun); // Returns 1 (true) printf(\u0026#34;%d\u0026#34;, isFishTasty); // Returns 0 (false) Comparing Values and Variables Boolean values commonly result from comparisons between values and variables. These comparisons help make decisions in programs.\nUsing comparison operators:\n// Compare values printf(\u0026#34;%d\u0026#34;, 10 \u0026gt; 9); // Returns 1 (true) // Compare variables int x = 10; int y = 9; printf(\u0026#34;%d\u0026#34;, x \u0026gt; y); // Returns 1 (true) Using the equality operator (==):\nprintf(\u0026#34;%d\u0026#34;, 10 == 10); // Returns 1 (true) printf(\u0026#34;%d\u0026#34;, 10 == 15); // Returns 0 (false) printf(\u0026#34;%d\u0026#34;, 5 == 55); // Returns 0 (false) You can also compare boolean variables:\nbool isHamburgerTasty = true; bool isPizzaTasty = true; // Compare boolean values printf(\u0026#34;%d\u0026#34;, isHamburgerTasty == isPizzaTasty); // Returns 1 (true) Important: Always remember to include the \u0026lt;stdbool.h\u0026gt; header file when working with boolean variables.\n"
},
{
	"uri": "//localhost:1313/11-c-if-else/",
	"title": "C If-Else",
	"tags": [],
	"description": "",
	"content": "C If-Else Logical Conditions C supports standard mathematical logical conditions:\nLess than: a \u0026lt; b Less than or equal to: a \u0026lt;= b Greater than: a \u0026gt; b Greater than or equal to: a \u0026gt;= b Equal to: a == b Not Equal to: a != b These conditions enable different actions based on decision logic.\nConditional Statements C provides several conditional statements:\nif - Executes code when a condition is true else - Executes code when the condition is false else if - Tests a new condition when the previous condition is false switch - Executes different code blocks based on multiple conditions The if Statement The if statement executes a block of code when a specified condition evaluates to true.\nSyntax if (condition) { // block of code to be executed if the condition is true } Important: if must be lowercase. Using If or IF will result in a compiler error.\nExamples Testing numeric values:\nif (20 \u0026gt; 18) { printf(\u0026#34;20 is greater than 18\u0026#34;); } Testing variables:\nint x = 20; int y = 18; if (x \u0026gt; y) { printf(\u0026#34;x is greater than y\u0026#34;); } Example Explanation In the variable example above:\nWe declare two variables: x with value 20 and y with value 18 The if statement tests whether x is greater than y using the \u0026gt; operator Since 20 is greater than 18, the condition is true The program prints \u0026ldquo;x is greater than y\u0026rdquo; to the screen The else Statement in C The else statement allows you to execute a different block of code when the if condition evaluates to false. This creates a binary decision structure in your program.\nSyntax if (condition) { // code block executed when condition is true } else { // code block executed when condition is false } Example Here\u0026rsquo;s a simple example that checks the time and prints an appropriate greeting:\nint time = 20; if (time \u0026lt; 18) { printf(\u0026#34;Good day.\u0026#34;); } else { printf(\u0026#34;Good evening.\u0026#34;); } // Output: \u0026#34;Good evening.\u0026#34; How it Works First, the condition inside the if statement is evaluated If the condition is false (in this case, 20 is not less than 18) The program skips the first code block The program executes the code block after the else statement In this example, it prints \u0026ldquo;Good evening.\u0026rdquo; Common Use Cases You can use the if...else statement for various scenarios:\n// Check if a number is positive or negative int number = -5; if (number \u0026gt;= 0) { printf(\u0026#34;The number is positive.\u0026#34;); } else { printf(\u0026#34;The number is negative.\u0026#34;); } // Check if a student passed or failed int score = 75; int passingGrade = 60; if (score \u0026gt;= passingGrade) { printf(\u0026#34;Student passed!\u0026#34;); } else { printf(\u0026#34;Student failed.\u0026#34;); } Best Practices Always use curly braces {} even for single-line statements Keep the code blocks well-indented for better readability Make sure the condition is clearly written and understandable Consider using else if when you need to check multiple conditions Remember that the else statement is optional - you can use if statements without them when you only need to execute code for the true condition.\nThe else if Statement Use the else if statement to specify a new condition if the first condition is false.\nSyntax if (condition1) { // block of code to be executed if condition1 is true } else if (condition2) { // block of code to be executed if condition1 is false and condition2 is true } else { // block of code to be executed if condition1 is false and condition2 is false } Example int time = 22; if (time \u0026lt; 10) { printf(\u0026#34;Good morning.\u0026#34;); } else if (time \u0026lt; 20) { printf(\u0026#34;Good day.\u0026#34;); } else { printf(\u0026#34;Good evening.\u0026#34;); } // Outputs \u0026#34;Good evening.\u0026#34; In this example:\nIf the time is less than 10, it prints \u0026ldquo;Good morning\u0026rdquo; If the time is less than 20 (but greater than or equal to 10), it prints \u0026ldquo;Good day\u0026rdquo; If neither condition is true (time is greater than or equal to 20), it prints \u0026ldquo;Good evening\u0026rdquo; The output is \u0026ldquo;Good evening\u0026rdquo; because the variable time is 22, which is greater than both 10 and 20, causing the code to execute the else block.\n"
},
{
	"uri": "//localhost:1313/12-c-switch/",
	"title": "C Switch",
	"tags": [],
	"description": "",
	"content": "C Switch In C programming, the switch statement provides an efficient alternative to multiple if-else statements. It allows you to select one code block from many options based on a specific expression.\nBasic Syntax switch (expression) { case x: // code block break; case y: // code block break; default: // code block } How It Works The switch statement operates by:\nEvaluating the expression once Comparing the expression\u0026rsquo;s value with each case Executing the matched case\u0026rsquo;s code block Using break to exit the switch block Falling back to default if no case matches Example: Weekday Names int day = 4; switch (day) { case 1: printf(\u0026#34;Monday\u0026#34;); break; case 2: printf(\u0026#34;Tuesday\u0026#34;); break; case 3: printf(\u0026#34;Wednesday\u0026#34;); break; case 4: printf(\u0026#34;Thursday\u0026#34;); break; case 5: printf(\u0026#34;Friday\u0026#34;); break; case 6: printf(\u0026#34;Saturday\u0026#34;); break; case 7: printf(\u0026#34;Sunday\u0026#34;); break; } // Outputs \u0026#34;Thursday\u0026#34; (day 4) The break Keyword The break statement serves several important purposes:\nExits the switch block Prevents execution of subsequent cases Improves execution efficiency Avoids unintended fall-through behavior The default Keyword Default provides a fallback option when no case matches:\nint day = 4; switch (day) { case 6: printf(\u0026#34;Today is Saturday\u0026#34;); break; case 7: printf(\u0026#34;Today is Sunday\u0026#34;); break; default: printf(\u0026#34;Looking forward to the Weekend\u0026#34;); } // Outputs \u0026#34;Looking forward to the Weekend\u0026#34; Important notes about default:\nMust be the last statement in the switch Does not require a break statement Executes when no case matches Is optional but recommended for error handling "
},
{
	"uri": "//localhost:1313/13-c-while-loop/",
	"title": "C While Loop",
	"tags": [],
	"description": "",
	"content": "C While Loop Loops can execute a block of code as long as a specified condition is reached. They are handy because they:\nSave time Reduce errors Make code more readable While Loop The while loop executes a block of code repeatedly as long as a specified condition is true.\nSyntax while (condition) { // code block to be executed } Example Here, the code in the loop will run repeatedly as long as the variable i is less than 5:\nint i = 0; while (i \u0026lt; 5) { printf(\u0026#34;%d\\n\u0026#34;, i); i++; } Note: Don\u0026rsquo;t forget to increment the variable used in the condition (i++), otherwise the loop will never end!\nThe output of this code will be:\n0\r1\r2\r3\r4 In this example:\nWe initialize i to 0 The while loop checks if i is less than 5 If true, it prints the value of i Then increments i by 1 The process repeats until i reaches 5, at which point the condition becomes false and the loop ends The Do/While Loop The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\nSyntax do { // code block to be executed } while (condition); The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:\nExample int i = 0; do { printf(\u0026#34;%d\\n\u0026#34;, i); i++; } while (i \u0026lt; 5); The output will be:\n0\r1\r2\r3\r4 "
},
{
	"uri": "//localhost:1313/14-c-for-loop/",
	"title": "C For Loop",
	"tags": [],
	"description": "",
	"content": "C For Loop When you need to iterate a specific number of times through a block of code, the for loop is often more suitable than a while loop.\nSyntax for (expression 1; expression 2; expression 3) { // code block to be executed } The three expressions in the for loop serve different purposes:\nExpression 1: Initializes the loop variable and executes only once before the loop begins Expression 2: Defines the condition for executing the code block - loop continues while this is true Expression 3: Executes after each iteration of the loop, typically to update the loop variable Example Here\u0026rsquo;s a simple example that prints numbers from 0 to 4:\nint i; for (i = 0; i \u0026lt; 5; i++) { printf(\u0026#34;%d\\n\u0026#34;, i); } How It Works Let\u0026rsquo;s break down the example:\ni = 0: Initializes the counter variable to 0 i \u0026lt; 5: Loop continues as long as i is less than 5 i++: Increments i by 1 after each iteration The output will be:\n0\r1\r2\r3\r4 This loop will execute exactly 5 times, with i taking on values from 0 to 4. Once i reaches 5, the condition i \u0026lt; 5 becomes false, and the loop terminates.\nNested Loops in C In C programming, you can place a loop inside another loop, creating what\u0026rsquo;s called a nested loop.\nWhen using nested loops, the inner loop completes all its iterations for each single iteration of the outer loop.\nExample int i, j; // Outer loop for (i = 1; i \u0026lt;= 2; ++i) { printf(\u0026#34;Outer: %d\\n\u0026#34;, i); // Executes 2 times // Inner loop for (j = 1; j \u0026lt;= 3; ++j) { printf(\u0026#34; Inner: %d\\n\u0026#34;, j); // Executes 6 times (2 * 3) } } Output: Outer: 1\rInner: 1\rInner: 2\rInner: 3\rOuter: 2\rInner: 1\rInner: 2\rInner: 3 Execution Flow: The outer loop runs 2 times (i = 1, 2) For each iteration of the outer loop: The inner loop runs 3 times (j = 1, 2, 3) Total number of inner loop iterations: 2 × 3 = 6 times "
},
{
	"uri": "//localhost:1313/15-c-break-and-continue/",
	"title": "C Break and Continue",
	"tags": [],
	"description": "",
	"content": "C Break and Continue Break Statement The break statement allows you to exit or \u0026ldquo;jump out\u0026rdquo; of a loop immediately. It\u0026rsquo;s commonly used in both loops and switch statements.\nBreak in For Loop Example int i; for (i = 0; i \u0026lt; 10; i++) { if (i == 4) { break; } printf(\u0026#34;%d\\n\u0026#34;, i); } This code will print numbers 0 through 3, then stop when i equals 4.\nContinue Statement The continue statement skips the rest of the current iteration and moves to the next one. Unlike break, it doesn\u0026rsquo;t exit the loop entirely.\nContinue in For Loop Example int i; for (i = 0; i \u0026lt; 10; i++) { if (i == 4) { continue; } printf(\u0026#34;%d\\n\u0026#34;, i); } This code will print all numbers from 0 to 9, except for 4.\nUsing Break and Continue in While Loops Break in While Loop int i = 0; while (i \u0026lt; 10) { if (i == 4) { break; } printf(\u0026#34;%d\\n\u0026#34;, i); i++; } Continue in While Loop int i = 0; while (i \u0026lt; 10) { if (i == 4) { i++; continue; } printf(\u0026#34;%d\\n\u0026#34;, i); i++; } Key differences between break and continue:\nbreak terminates the entire loop continue skips only the current iteration With continue in a while loop, remember to update your counter before the continue statement to avoid infinite loops "
},
{
	"uri": "//localhost:1313/16-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "Introduction This workshop provides a comprehensive overview of the C programming language, covering everything from basic concepts to advanced programming techniques. The course is designed to help learners master the fundamentals and develop C programming skills systematically.\nProgram Content Part 1: Foundation Introduction to CS50 Programming in C Language C Syntax Output and Input in C Part 2: Basics Comments in C Variables in C Data Types in C Constants in C Programming Operators in C C Syntax Part 3: Control Structures Conditional Statements in C Switch Statement in C Loops in C Programming For Loops in C Break and Continue Statements in C Learning Objectives Understand and apply basic concepts in C programming Master C language syntax and rules Practice with different control structures Develop problem-solving skills through programming Build a solid foundation for learning other programming languages Learning Methods Combine theory with practical exercises Complete assignments and real-world examples Discussion and problem-solving Build small projects to apply knowledge Target Audience Programming beginners IT students Those wanting to strengthen their C foundation People interested in software development Prerequisites No prior programming experience required Need a computer and basic C development environment Learning spirit and willingness to practice Expected Outcomes After completing the workshop, participants will:\nBe able to write basic C programs Understand C language syntax and structure Be capable of self-learning and developing advanced programming skills Be prepared for learning other programming languages Conclusion The C programming language is one of the most important foundations in computer science and software development. This workshop is designed to provide a comprehensive learning journey, from the most basic concepts to essential programming techniques. Through learning C, participants not only master a powerful programming language but also develop logical thinking and problem-solving skills - core elements for growth in the IT industry.\nWith a curriculum organized in order from easy to difficult, combining theory and practice, the workshop creates optimal conditions for students to absorb and apply knowledge effectively. In particular, starting with CS50 - a famous computer science course, shows that the workshop is built on a proven and reliable educational foundation.\nThe knowledge and skills gained from this workshop will be a solid stepping stone, not only for developing C applications but also supporting the learning of other modern programming languages. In today\u0026rsquo;s digital age, deep understanding of C language will be a significant advantage for anyone wanting to build a career in information technology.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]